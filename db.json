{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-xups/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/jelon.jpg","path":"img/jelon.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/no_found.png","path":"img/no_found.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/scrolltoparrow.png","path":"img/scrolltoparrow.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/share.png","path":"img/share.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/unsigned_avatar.jpg","path":"img/unsigned_avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/url.png","path":"img/url.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_jelon.png","path":"img/wechat_jelon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_mp.jpg","path":"img/wechat_mp.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_pay.png","path":"img/wechat_pay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_reward.jpg","path":"img/wechat_reward.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/comment.js","path":"js/comment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/html5.js","path":"js/html5.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/lab/banner.jpg","path":"img/lab/banner.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/0.jpg","path":"img/thumbnail/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/1.jpg","path":"img/thumbnail/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/2.jpg","path":"img/thumbnail/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/3.jpg","path":"img/thumbnail/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/4.jpg","path":"img/thumbnail/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/5.jpg","path":"img/thumbnail/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/6.jpg","path":"img/thumbnail/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/7.jpg","path":"img/thumbnail/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/8.jpg","path":"img/thumbnail/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/9.jpg","path":"img/thumbnail/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.otf","path":"css/fonts/homizio-nova/italic.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.ttf","path":"css/fonts/homizio-nova/italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.otf","path":"css/fonts/homizio-nova/light.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.ttf","path":"css/fonts/homizio-nova/light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.otf","path":"css/fonts/homizio-nova/light_italic.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.ttf","path":"css/fonts/homizio-nova/light_italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.otf","path":"css/fonts/homizio-nova/regular.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.ttf","path":"css/fonts/homizio-nova/regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.eot","path":"css/fonts/icomoon/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.svg","path":"css/fonts/icomoon/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.ttf","path":"css/fonts/icomoon/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.woff","path":"css/fonts/icomoon/icomoon.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"f15e3a5fac751c381e6ff27c7b02b31fe6159f0b","modified":1607161480671},{"_id":"source/_posts/试用品专仓模式技术评审.md","hash":"3182aa6353a63cbdb76c8739c16f3ad21e851b53","modified":1607163437848},{"_id":"source/about/index.md","hash":"dfe353573d4ac802bb95de4e9f33c82a48b217d4","modified":1607161984542},{"_id":"source/comment/index.md","hash":"e5d948667aa52addad0899d68d1419f4751c00ac","modified":1607162001822},{"_id":"source/lab/index.md","hash":"70a577429c134383dc903ceff74bbd4c4ffe2515","modified":1607162486623},{"_id":"source/_posts/JAVA/JAVA Mybatis 关联总结.md","hash":"2e361fc281bc960b74e79dd7d261df10afeccec9","modified":1607248669382},{"_id":"source/_posts/JAVA/JAVA8 LocalDate.md","hash":"b226edc1fd1726c1e938ee11c932adf1415bdb41","modified":1607248669382},{"_id":"source/_posts/JAVA/JAVA 请求接收Date类型OR 返回Date类型.md","hash":"1ca6c923f09385f88b761daba49f6553642b056a","modified":1607248669382},{"_id":"source/_posts/Mysql/MYSQL 总结.md","hash":"63d91c104478744586725aab83dc39fa3b4ee914","modified":1607248695703},{"_id":"source/_posts/Others/GitPage.md","hash":"74dc4bb94a187ce70c2282e066461bb8949e1960","modified":1607247891021},{"_id":"source/_posts/Others/hexo常用命令.md","hash":"851b8983a7edd7ed484aeef70631d38b807d3726","modified":1607247213912},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.ttf","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607160214315},{"_id":"themes/hexo-theme-xups/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1607160214288},{"_id":"themes/hexo-theme-xups/README.md","hash":"e6341c00668da0685cb3e38d3603fca6f3c729b2","modified":1607160214289},{"_id":"themes/hexo-theme-xups/_config.yml","hash":"f506900f87b2df28c29348fa4e9f434be9ded9ee","modified":1607249132641},{"_id":"themes/hexo-theme-xups/__scaffolds/draft.md","hash":"eef222e6da6ad30e31ca264743f3e0c37db97ad0","modified":1607160214289},{"_id":"themes/hexo-theme-xups/__scaffolds/page.md","hash":"892cedeb7b62a73e72a3b369daf2bc63dfee47dc","modified":1607160214289},{"_id":"themes/hexo-theme-xups/__scaffolds/post.md","hash":"eef222e6da6ad30e31ca264743f3e0c37db97ad0","modified":1607160214289},{"_id":"themes/hexo-theme-xups/layout/archive.ejs","hash":"7375cd5e27be00c1a34b97e25086f261ba4b24f4","modified":1607160214300},{"_id":"themes/hexo-theme-xups/layout/category.ejs","hash":"1607af608586d69930e1e389e3fcf2a24b701fad","modified":1607160214301},{"_id":"themes/hexo-theme-xups/layout/index.ejs","hash":"5844cc612c445e5276981cfd57a4072c5ea5fbde","modified":1607160214301},{"_id":"themes/hexo-theme-xups/layout/layout.ejs","hash":"73f60bed976cc4e55eb2f4c1d3bec1e3975e86ba","modified":1607160214301},{"_id":"themes/hexo-theme-xups/layout/page.ejs","hash":"66c8c314d4083fff38568f2900d98223c407d5ef","modified":1607160214302},{"_id":"themes/hexo-theme-xups/layout/post.ejs","hash":"6690fe7adb736e9f3d9d7f65a6b964cdc3c21f20","modified":1607160214302},{"_id":"themes/hexo-theme-xups/layout/tag.ejs","hash":"e5d99bff4994ec19ee7729cbb41b63546b17a6ff","modified":1607160214302},{"_id":"themes/hexo-theme-xups/__source/about/index.md","hash":"32707ad1a27069c7f30fdbd645da15d25910fb69","modified":1607160214290},{"_id":"themes/hexo-theme-xups/__source/comment/index.md","hash":"8ebc21dec895c59375e511f921c8eef99cf192e7","modified":1607160214290},{"_id":"themes/hexo-theme-xups/__source/lab/index.md","hash":"756591670a1f2a6819add9f344e59d312eeb4d40","modified":1607160214291},{"_id":"themes/hexo-theme-xups/layout/_custom/about.ejs","hash":"db630e1e9cdc1e28b9d5be99c54c67a506780f64","modified":1607162322510},{"_id":"themes/hexo-theme-xups/layout/_custom/comment.ejs","hash":"269f2d47262645380795786767e63ba9ef2eebf0","modified":1607162377531},{"_id":"themes/hexo-theme-xups/layout/_custom/lab.ejs","hash":"f6f601ddf3e97ffaec9ce85db41b1fdfdf7c3fcc","modified":1607160214293},{"_id":"themes/hexo-theme-xups/layout/_partial/after-footer.ejs","hash":"cd64b8317ad72c2394414c9ddad86cffda70608b","modified":1607160214293},{"_id":"themes/hexo-theme-xups/layout/_partial/article.ejs","hash":"da86797a3b484c730d838f50a11e56bde16df0d8","modified":1607160214294},{"_id":"themes/hexo-theme-xups/layout/_partial/baidu-analytics.ejs","hash":"9d950e8dc559c8e0279d4ef7ae60630ff4bd1118","modified":1607160214294},{"_id":"themes/hexo-theme-xups/layout/_partial/footer.ejs","hash":"8c56a4994d7cccc1694081f43ece229c8d85e930","modified":1607160214294},{"_id":"themes/hexo-theme-xups/layout/_partial/head.ejs","hash":"b74173aa97f1bb843bc3a2091a616f5dd4e723f2","modified":1607160214294},{"_id":"themes/hexo-theme-xups/layout/_partial/header.ejs","hash":"6cb479039ee016469b45da77e61dfb62c5d3bce6","modified":1607160214295},{"_id":"themes/hexo-theme-xups/layout/_partial/post-list.ejs","hash":"360f3c7627e55f7e26e363ef02ddc7c6bb46f2a2","modified":1607160214295},{"_id":"themes/hexo-theme-xups/layout/_partial/sidebar.ejs","hash":"83fdf954aa81bae8485e4f6b5be31ec9d2ccce83","modified":1607160214299},{"_id":"themes/hexo-theme-xups/source/css/.DS_Store","hash":"7a2750dc6206c6f07303809521f5eb6654cfc3b3","modified":1607160214302},{"_id":"themes/hexo-theme-xups/source/css/_extend.styl","hash":"979529173d5fb5f7cf8a2fa493735a52584556bd","modified":1607160214304},{"_id":"themes/hexo-theme-xups/source/css/_markdown.styl","hash":"0fd8cff5a5bbf93507817758478cd22efd3cfc88","modified":1607160214304},{"_id":"themes/hexo-theme-xups/source/css/_variables.styl","hash":"d0314bd375ba70110ae95a716b7f53a949545f69","modified":1607160214308},{"_id":"themes/hexo-theme-xups/source/css/style.styl","hash":"ae25cdd604a9e4643caa04c704593fd4cc70dfd6","modified":1607160214316},{"_id":"themes/hexo-theme-xups/source/img/.DS_Store","hash":"a1bdef3a79e0c0f0c4f92e81c00a875f6422dab5","modified":1607160214316},{"_id":"themes/hexo-theme-xups/source/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1607160214317},{"_id":"themes/hexo-theme-xups/source/img/jelon.jpg","hash":"ee6f50aca7414a76ab46d831582b5a30501554bb","modified":1607248622292},{"_id":"themes/hexo-theme-xups/source/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1607160214318},{"_id":"themes/hexo-theme-xups/source/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1607160214319},{"_id":"themes/hexo-theme-xups/source/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1607160214320},{"_id":"themes/hexo-theme-xups/source/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1607160214330},{"_id":"themes/hexo-theme-xups/source/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1607160214330},{"_id":"themes/hexo-theme-xups/source/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1607160214331},{"_id":"themes/hexo-theme-xups/source/img/wechat_pay.png","hash":"3fb3bbd4b1fae4259578dce0ca838e0696283041","modified":1607160214331},{"_id":"themes/hexo-theme-xups/source/js/comment.js","hash":"ad198073f63d213024f5b490db5d5e7fdfc116ef","modified":1607160214333},{"_id":"themes/hexo-theme-xups/source/js/html5.js","hash":"4fefd28dcad6c973c44719ce8b3a8b82fe670a59","modified":1607160214333},{"_id":"themes/hexo-theme-xups/source/js/main.js","hash":"c8262a776e953d7f53f58c7a68a3a4b2c2fb47b5","modified":1607160214333},{"_id":"themes/hexo-theme-xups/layout/_partial/post/category.ejs","hash":"2908913f083b0d95a5cd09a7996cacfe722a3118","modified":1607160214296},{"_id":"themes/hexo-theme-xups/layout/_partial/post/comment.ejs","hash":"d3f2eceb848e750c7a677319cd9ff4904ab61c45","modified":1607160214296},{"_id":"themes/hexo-theme-xups/layout/_partial/post/date.ejs","hash":"848f362936b3f21e067e2a0783efbdbdab338985","modified":1607160214297},{"_id":"themes/hexo-theme-xups/layout/_partial/post/gallery.ejs","hash":"ed531d1970eedabd2a454d51ac92fffcc0697bec","modified":1607160214297},{"_id":"themes/hexo-theme-xups/layout/_partial/post/nav.ejs","hash":"fa8cb2d5c593fa402e19e1089007812219596481","modified":1607160214297},{"_id":"themes/hexo-theme-xups/layout/_partial/post/post-item.ejs","hash":"8cb6e5a5c2f87826ca9b1906e092ff94ce6f7b76","modified":1607249404778},{"_id":"themes/hexo-theme-xups/layout/_partial/post/share.ejs","hash":"c0f861fb0bd74aced347e0bccee5fa7ff37fa7b4","modified":1607160214298},{"_id":"themes/hexo-theme-xups/layout/_partial/post/tag.ejs","hash":"38a0810b82e69ddd105211e7ff4ee9f2fb832ce9","modified":1607160214298},{"_id":"themes/hexo-theme-xups/layout/_partial/post/title.ejs","hash":"4819520155fc4e389b09c80310af5c61fcd57c03","modified":1607249880647},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/categorys.ejs","hash":"29687d96d26fb41f0e78ef8fecc3be6da3d0da29","modified":1607160214299},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/friend_links.ejs","hash":"4ff96fbfb9d70b4636108c5deaaf041c6681ceeb","modified":1607160214300},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/search.ejs","hash":"92f9a96a5569deba052db5af0b11113de96a6498","modified":1607160214300},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/tags.ejs","hash":"bc7b5e50b19e5a7f0f5c81d653407b26d8881c25","modified":1607160214300},{"_id":"themes/hexo-theme-xups/layout/_partial/widget/weibo.ejs","hash":"5803954fea40637eabfa96bfb6d38328d3c33005","modified":1607160214300},{"_id":"themes/hexo-theme-xups/source/css/_base/font.styl","hash":"52895afc3fd1e250d3359d9250f9f6a33e0c797a","modified":1607160214303},{"_id":"themes/hexo-theme-xups/source/css/_base/global.styl","hash":"5ba865047a3438ab6c2347e7403c67a9f2085619","modified":1607160214303},{"_id":"themes/hexo-theme-xups/source/css/_base/normalize.styl","hash":"3f6122f583b1590d51fe8181ccd310786c04a4c2","modified":1607160214303},{"_id":"themes/hexo-theme-xups/source/css/_base/reset.styl","hash":"ee2a445efc1fbfad1fcdf3cd141e81323171bd25","modified":1607160214304},{"_id":"themes/hexo-theme-xups/source/css/_partial/.DS_Store","hash":"16121b987e7a7a6c89f78f512e6e63eea583e25a","modified":1607160214305},{"_id":"themes/hexo-theme-xups/source/css/_partial/article.styl","hash":"127dd055a12c250b13add12cd0615b707fe21fab","modified":1607160214305},{"_id":"themes/hexo-theme-xups/source/css/_partial/comment.styl","hash":"999c90acf74f94cb930362e0cc869bbd45f8a005","modified":1607160214305},{"_id":"themes/hexo-theme-xups/source/css/_partial/footer.styl","hash":"e4891d0642ab0816f29b8d42e014b9818def2a62","modified":1607160214305},{"_id":"themes/hexo-theme-xups/source/css/_partial/header.styl","hash":"796da02640d3501e269a828e634dcbc89ef41a11","modified":1607160214306},{"_id":"themes/hexo-theme-xups/source/css/_partial/highlight.styl","hash":"c1c9655afa9739a4987dc196fff5af50688ea445","modified":1607160214306},{"_id":"themes/hexo-theme-xups/source/css/_partial/post.styl","hash":"163988e3cb92deab32674175cb25048ca2f96ae6","modified":1607160214306},{"_id":"themes/hexo-theme-xups/source/css/_partial/responsive.styl","hash":"5f262fc7f37cab2c1a8868ef10ab652b6ddd0d5c","modified":1607160214307},{"_id":"themes/hexo-theme-xups/source/css/_partial/searchform.styl","hash":"a3a3c28c3df8dfea5018498af5f4eb3732ad03c3","modified":1607160214307},{"_id":"themes/hexo-theme-xups/source/css/_partial/sidebar.styl","hash":"0e64e0a73a6befe0be43a9cb9458e7c690fe4883","modified":1607160214307},{"_id":"themes/hexo-theme-xups/source/css/_partial/theme.styl","hash":"e1eb40c93a39f2212b042fcb4481be2e901240af","modified":1607160214307},{"_id":"themes/hexo-theme-xups/source/css/fonts/.DS_Store","hash":"db2379b0a524b084530079a6a32ba976f2892009","modified":1607160214308},{"_id":"themes/hexo-theme-xups/source/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1607160214318},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1607160214320},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1607160214321},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1607160214323},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1607160214323},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1607160214324},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1607160214327},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1607160214327},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1607160214328},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/.DS_Store","hash":"94c491df2256ef547252eed029a8bfb2961da5fe","modified":1607160214309},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1607160214309},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1607160214310},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1607160214311},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1607160214312},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1607160214313},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1607160214314},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.eot","hash":"26de148529b318cb8159c70ef5adbe3667fb3e6d","modified":1607160214315},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.svg","hash":"2e3227e11e13917eecb676062ee953b37ea957c0","modified":1607160214315},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.woff","hash":"a5a4ffc5ecda60e59beac6b0f096b25b243a2acb","modified":1607160214316},{"_id":"themes/hexo-theme-xups/source/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1607160214319},{"_id":"themes/hexo-theme-xups/source/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1607160214329},{"_id":"themes/hexo-theme-xups/source/img/wechat_reward.jpg","hash":"948af73c7aa4ad3e74c046c11d5116c847cf67a6","modified":1607160214332},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1607160214321},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1607160214322},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1607160214312},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1607160214315},{"_id":"themes/hexo-theme-xups/xups.png","hash":"22f1fc32dea794370b4e791b885c2afb03c886c6","modified":1607160214340},{"_id":"public/about/index.html","hash":"eae59d9f27de5c9712f278cb660cafb5a201c265","modified":1696660576559},{"_id":"public/comment/index.html","hash":"314958fac8149d5c7d9f6a7fd21e232d053fcf73","modified":1696660576559},{"_id":"public/lab/index.html","hash":"22e0d4fddffe35d4426b3e336d089e470e3b6fa9","modified":1696660576559},{"_id":"public/2020/12/06/Mysql/MYSQL 总结/index.html","hash":"4ea4ff111e076d25df30f71168ad3ccb60aca708","modified":1696660576559},{"_id":"public/2020/12/06/JAVA/JAVA8 LocalDate/index.html","hash":"be4334f0cf4dada40534344081403a2f0c6ac589","modified":1696660576559},{"_id":"public/2020/12/06/JAVA/JAVA 请求接收Date类型OR 返回Date类型/index.html","hash":"689df27ef76fddfb7c6616ed624b928b8f581e1b","modified":1696660576559},{"_id":"public/2020/12/06/JAVA/JAVA Mybatis 关联总结/index.html","hash":"6bf74bb525b0cdf9b22d740b4c7c3707ff69d4b7","modified":1696660576559},{"_id":"public/2020/12/06/Others/hexo常用命令/index.html","hash":"c5f13c2adcf2bd467ffe8968e92c96774e9d5b12","modified":1696660576559},{"_id":"public/2020/12/05/Others/GitPage/index.html","hash":"6fe453a1be25fca3ae9bcc9b9a984da82050fe6f","modified":1696660576559},{"_id":"public/2020/12/05/试用品专仓模式技术评审/index.html","hash":"df46026a747a51f569743817bffdcbf39f530fa4","modified":1607252043646},{"_id":"public/2020/12/05/hello-world/index.html","hash":"acc392d32e96271cd0047d86c928c66b37244ab7","modified":1696660576559},{"_id":"public/categories/JAVA/index.html","hash":"8ad581f1fe3d2d237485f8b85340a85798827e77","modified":1696660576559},{"_id":"public/categories/Mysql/index.html","hash":"aeaa2501abe159cdd33c3c49bcf2a46a402297ca","modified":1696660576559},{"_id":"public/categories/Others/index.html","hash":"6c9e9a98eb7f6336d3c4ae6bbdf1bc3b530614cf","modified":1696660576559},{"_id":"public/archives/index.html","hash":"7840143559abfae0095ecf2b1b1dfa75378f9a55","modified":1696660576559},{"_id":"public/archives/2020/index.html","hash":"c8940030270ea89a5cdf5aab6fe8c25ba6af112b","modified":1696660576559},{"_id":"public/archives/2020/12/index.html","hash":"680d39173230993e4cfd1669086e6316cd1803b7","modified":1696660576559},{"_id":"public/tags/hexo/index.html","hash":"48861e081d555cfd75317a4c92f6e800c99ed882","modified":1696660576559},{"_id":"public/tags/website/index.html","hash":"0fc6791df061a2f69b12a846f90fcc98996b0ede","modified":1696660576559},{"_id":"public/tags/前端/index.html","hash":"ee64e49ad6e0485ade8bed0719a76709a901b61a","modified":1696660576559},{"_id":"public/index.html","hash":"a3af0fba13b99340e35e8d8c82160482b80d609f","modified":1696660576559},{"_id":"public/css/fonts/icomoon/icomoon.ttf","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607252043646},{"_id":"public/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1607252043646},{"_id":"public/img/jelon.jpg","hash":"ee6f50aca7414a76ab46d831582b5a30501554bb","modified":1607252043646},{"_id":"public/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1607252043646},{"_id":"public/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1607252043646},{"_id":"public/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1607252043646},{"_id":"public/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1607252043646},{"_id":"public/img/wechat_pay.png","hash":"3fb3bbd4b1fae4259578dce0ca838e0696283041","modified":1607252043646},{"_id":"public/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1607252043646},{"_id":"public/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1607252043646},{"_id":"public/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1607252043646},{"_id":"public/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1607252043646},{"_id":"public/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1607252043646},{"_id":"public/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1607252043646},{"_id":"public/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1607252043646},{"_id":"public/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1607252043646},{"_id":"public/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1607252043646},{"_id":"public/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1607252043646},{"_id":"public/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1607252043646},{"_id":"public/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1607252043646},{"_id":"public/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1607252043646},{"_id":"public/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1607252043646},{"_id":"public/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1607252043646},{"_id":"public/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1607252043646},{"_id":"public/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1607252043646},{"_id":"public/css/fonts/icomoon/icomoon.eot","hash":"26de148529b318cb8159c70ef5adbe3667fb3e6d","modified":1607252043646},{"_id":"public/css/fonts/icomoon/icomoon.svg","hash":"2e3227e11e13917eecb676062ee953b37ea957c0","modified":1607252043646},{"_id":"public/css/fonts/icomoon/icomoon.woff","hash":"a5a4ffc5ecda60e59beac6b0f096b25b243a2acb","modified":1607252043646},{"_id":"public/img/wechat_reward.jpg","hash":"948af73c7aa4ad3e74c046c11d5116c847cf67a6","modified":1607252043646},{"_id":"public/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1607252043646},{"_id":"public/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1607252043646},{"_id":"public/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1607252043646},{"_id":"public/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1607252043646},{"_id":"public/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1607252043646},{"_id":"public/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1607252043646},{"_id":"public/css/style.css","hash":"c0a98c212cc883ac193307a38bd142f3efc9d5e8","modified":1607252043646},{"_id":"public/js/html5.js","hash":"4fefd28dcad6c973c44719ce8b3a8b82fe670a59","modified":1607252043646},{"_id":"public/js/main.js","hash":"a5e11b1c3c2de39d3297829e235211708b261a2f","modified":1607252043646},{"_id":"public/js/comment.js","hash":"70ae66a4cf5df8fa15b912d6c234609344b870a5","modified":1607252043646}],"Category":[{"name":"JAVA","_id":"ckid0dae60007g4l34k8c4xz4"},{"name":"Mysql","_id":"ckid0daef000hg4l37lpd06oj"},{"name":"Others","_id":"ckid0daeg000lg4l3fr2e89es"}],"Data":[],"Page":[{"title":"关于","date":"2020-12-05T09:53:04.542Z","pageid":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: {{date}}\npageid: about\n---","updated":"2020-12-05T09:53:04.542Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckid0dadx0000g4l37a0z03r2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"留言","date":"2020-12-05T09:53:21.822Z","pageid":"comment","_content":"","source":"comment/index.md","raw":"---\ntitle: 留言\ndate: {{date}}\npageid: comment\n---\n","updated":"2020-12-05T09:53:21.822Z","path":"comment/index.html","comments":1,"layout":"page","_id":"ckid0dae30002g4l3firv3lfb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"XX","date":"2020-12-05T10:01:26.623Z","pageid":"lab","projects":{"blog_demo":{"title":"Blog Demo","time":"2016-10-10T00:00:00.000Z","content":{"1":{"name":"基于 vue + vuex + bootstrap 的 blog demo","link":"https://github.com/jangdelong/vue-blog-demo"}}},"hexo_theme_xups":{"title":"hexo-theme-xups 博客主题","time":"2016-03-12T00:00:00.000Z","content":{"1":{"name":"基于 hexo 静态博客系统的 博客主题 xups","link":"https://github.com/jangdelong/hexo-theme-xups"}}},"typecho_theme_xups":{"title":"Typecho 博客主题","time":"2015-10-15T00:00:00.000Z","content":{"1":{"name":"基于 php 博客系统 typecho 的主题 xups","link":"https://github.com/jangdelong/typecho-theme-xups"}}}},"_content":"","source":"lab/index.md","raw":"---\ntitle: XX\ndate: {{date}}\npageid: lab\n\nprojects:\n    blog_demo:\n        title: Blog Demo\n        time: 2016-10-10\n        content: \n            1:\n                name: 基于 vue + vuex + bootstrap 的 blog demo\n                link: https://github.com/jangdelong/vue-blog-demo\n    hexo_theme_xups:\n        title: hexo-theme-xups 博客主题\n        time: 2016-03-12\n        content:\n            1:\n                name: 基于 hexo 静态博客系统的 博客主题 xups\n                link: https://github.com/jangdelong/hexo-theme-xups\n    typecho_theme_xups:\n        title: Typecho 博客主题\n        time: 2015-10-15\n        content: \n            1:        \n                name: 基于 php 博客系统 typecho 的主题 xups\n                link: https://github.com/jangdelong/typecho-theme-xups  \n---\n","updated":"2020-12-05T10:01:26.623Z","path":"lab/index.html","comments":1,"layout":"page","_id":"ckid0dae40004g4l3b9wv4h04","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello","date":"2020-12-05T09:02:35.447Z","author":"zk","thumbnail":null,"blogexcerpt":null,"_content":"\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello\ndate:\n  '[object Object]': null\nauthor: zk\ncategories: []\ntags:\nthumbnail:\nblogexcerpt:\n---\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2020-12-05T09:44:40.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckid0dae00001g4l3asydegul","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"_content":"# JAVA Mybatis 关联总结\n\n## tip:\n\n​\t需求是三表关联，搞了三个实体类用activity_id做关联键，所以设计了一个实体类（包括基本类型活动号和三个表对应的三个实体类）。\n\n用到了resultMap中的associate和实体类映射。\n\n**association: 一对一关联(has one)**\n**collection:一对多关联(has many)**\n\n## 使用：\n\n一对一（associate）的三种使用方式\n\n ### 1、第一种用法:association中使用select\n\n```xml\n<resultMap type=\"User\" id=\"userMap\">\n    <result property=\"userName\" column=\"user_name\"/>\n    <result property=\"age\" column=\"age\"/>\n   <association property=\"card\" column=\"card_id\" select=\"com.zhu.ssm.dao.      CardDao.queryCardById\">\n   </association>\n</resultMap>\n <select id=\"queryCardById\" parameterType=\"int\" resultType=\"Card\">\n        SELECT *\n        FROM tb_card\n        WHERE card_id=#{cardId}\n </select>\n```\n\n> 使用select是每次将 关联值 传给 column=“card_id”列\n>\n> - 嵌套查询:通过执行另外一个 SQL 映射语句来返回预期的复杂类型。会造成N+1现象，查询性能，不推荐\n>\n> - | 属性        | 描述                                                         |\n>   | ----------- | ------------------------------------------------------------ |\n>   | `column`    | 来自数据库的列名,或重命名的列标签。这和通常传递给 resultSet.getString(columnName)方法的字符串是相同的。 column 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= \" {prop1=col1,prop2=col2} \" 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。 |\n>   | `select`    | 另外一个映射语句的 ID,可以加载这个属性映射需要的复杂类型。获取的 在列属性中指定的列的值将被传递给目标 select 语句作为参数。表格后面 有一个详细的示例。 select 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= \" {prop1=col1,prop2=col2} \" 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。 |\n>   | `fetchType` | Optional. Valid values are `lazy` and `eager`. If present, it supersedes the global configuration parameter `lazyLoadingEnabled` for this mapping. |\n>\n>   [参考示例](https://www.w3cschool.cn/mybatis/f4uw1ilx.html)\n\n### 2、第二种方法，嵌套resultMap\n\n```xml\n<resultMap type=\"Card\" id=\"cardMap\">\n      <id property=\"cardId\" column=\"card_id\"/>\n      <result property=\"cardNum\" column=\"card_num\"/>\n      <result property=\"address\" column=\"address\"/>\n</resultMap>\n\n<resultMap type=\"User\" id=\"userMap\">\n     <result property=\"userName\" column=\"user_name\"/>\n     <result property=\"age\" column=\"age\"/>\n     <association property=\"card\" resultMap=\"cardMap\">\n     </association>\n</resultMap>\n```\n\n第二种方法就是在UserDao.xml中先定义一个Card的resultMap，然后在User的resultMap的association标签中通过resultMap=\"cardMap\"引用。这种方法相比于第一种方法较为简单。\n\n**主要是可以resultmap 复用**\n\n### 3、第三种方法:嵌套resultMap简化版\n\n```xml\n<resultMap type=\"User\" id=\"userMap\">\n   <result property=\"userName\" column=\"user_name\"/>\n   <result property=\"age\" column=\"age\"/>\n   <association property=\"card\" column=\"card_id\" javaType=\"Card\">\n      <id property=\"cardId\" column=\"card_id\"/>\n      <result property=\"cardNum\" column=\"card_num\"/>\n      <result property=\"address\" column=\"address\"/>\n    </association>\n</resultMap> \n```\n\n这种方法就把Card的resultMap定义在了association 标签里面，通过javaType来指定是哪个类的resultMap，个人认为这种方法最简单，缺点就是cardMap不能复用。具体用哪种方法，视情况而定。\n\n\n\n作者：贪挽懒月\n链接：https://www.jianshu.com/p/018c0f083501\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n### 4、Collection同 associate\n\n```xml\n<resultMap type=\"User\" id=\"userMap\">\n    <result property=\"userName\" column=\"user_name\"/>\n    <result property=\"age\" column=\"age\"/>\n    <collection property=\"mobilePhone\" column=\"user_id\" ofType=\"MobilePhone\">\n      <id column=\"mobile_phone_id\" property=\"mobilePhoneId\" />\n      <result column=\"brand\" property=\"brand\" />\n      <result column=\"price\" property=\"price\" />\n \t</collection>\n</resultMap>\n```\n\n### 5、id & result\n\n```\n<id property=\"id\" column=\"post_id\"/>\n<result property=\"subject\" column=\"post_subject\"/>\n```\n\n这些是结果映射最基本内容。id 和 result 都映射一个单独列的值到简单数据类型(字符 串,整型,双精度浮点数,日期等)的单独属性或字段。\n\n这两者之间的唯一不同是 id 表示的结果将是当比较对象实例时用到的标识属性。这帮 助来改进整体表现,特别是缓存和嵌入结果映射(也就是联合映射) 。\n\n## 总结：\n\n使用过程模仿第三种嵌套方式，不一致的是将每个关联表均设置为一个实体类，使用关联键<id>标签关联。\n\n* resultMap\n\n![image-20201008164022322](C:\\Users\\zhangkai324\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201008164022322.png)\n\n* sql\n\n```xml\n<select id=\"downloadTransform\"  parameterType=\"map\" resultMap=\"downloadEntity\">\n        select a.activity_id as 'activity_id','' as 'empty',\n           a.*,b.*,c.*\n        from\n        (<include refid=\"downloadActivityInfo\"></include>)a\n        left join\n        (<include refid=\"downloadTransformInfo\"></include>)b\n        on a.activity_id = b.activity_id\n        left join\n        (<include refid=\"getUserCountByActivity\"></include>)c\n        on a.activity_id = c.activity_id\n </select>\n```\n\n* 实体类\n\n```java\n@Data\n@Builder\n@AllArgsConstructor //全参构造函数\n@NoArgsConstructor  //无参构造函数\npublic class DownloadTransformDetailsPO {\n    private Long activityId;\n    private String empty;\n    \n    DownloadActivityPO downloadActivityPO;\n    DownloadTransformPO downloadTransformPO;\n    DownloadUserPO downloadUserPO;\n}\n```\n\n注意：\n\n@Builder只会生成有参的构造方法，会取消默认的无参构造方法。\n\n![image-20201008201207621](C:\\Users\\zhangkai324\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201008201207621.png)\n\n若关联的实体类未提供无参构造函数，可能出现indexOutofBounds异常  或者 类型不匹配，走的构造函数是有参构造函数那块。","source":"_posts/JAVA/JAVA Mybatis 关联总结.md","raw":"---\ncategories:\n  - JAVA\n---\n# JAVA Mybatis 关联总结\n\n## tip:\n\n​\t需求是三表关联，搞了三个实体类用activity_id做关联键，所以设计了一个实体类（包括基本类型活动号和三个表对应的三个实体类）。\n\n用到了resultMap中的associate和实体类映射。\n\n**association: 一对一关联(has one)**\n**collection:一对多关联(has many)**\n\n## 使用：\n\n一对一（associate）的三种使用方式\n\n ### 1、第一种用法:association中使用select\n\n```xml\n<resultMap type=\"User\" id=\"userMap\">\n    <result property=\"userName\" column=\"user_name\"/>\n    <result property=\"age\" column=\"age\"/>\n   <association property=\"card\" column=\"card_id\" select=\"com.zhu.ssm.dao.      CardDao.queryCardById\">\n   </association>\n</resultMap>\n <select id=\"queryCardById\" parameterType=\"int\" resultType=\"Card\">\n        SELECT *\n        FROM tb_card\n        WHERE card_id=#{cardId}\n </select>\n```\n\n> 使用select是每次将 关联值 传给 column=“card_id”列\n>\n> - 嵌套查询:通过执行另外一个 SQL 映射语句来返回预期的复杂类型。会造成N+1现象，查询性能，不推荐\n>\n> - | 属性        | 描述                                                         |\n>   | ----------- | ------------------------------------------------------------ |\n>   | `column`    | 来自数据库的列名,或重命名的列标签。这和通常传递给 resultSet.getString(columnName)方法的字符串是相同的。 column 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= \" {prop1=col1,prop2=col2} \" 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。 |\n>   | `select`    | 另外一个映射语句的 ID,可以加载这个属性映射需要的复杂类型。获取的 在列属性中指定的列的值将被传递给目标 select 语句作为参数。表格后面 有一个详细的示例。 select 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= \" {prop1=col1,prop2=col2} \" 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。 |\n>   | `fetchType` | Optional. Valid values are `lazy` and `eager`. If present, it supersedes the global configuration parameter `lazyLoadingEnabled` for this mapping. |\n>\n>   [参考示例](https://www.w3cschool.cn/mybatis/f4uw1ilx.html)\n\n### 2、第二种方法，嵌套resultMap\n\n```xml\n<resultMap type=\"Card\" id=\"cardMap\">\n      <id property=\"cardId\" column=\"card_id\"/>\n      <result property=\"cardNum\" column=\"card_num\"/>\n      <result property=\"address\" column=\"address\"/>\n</resultMap>\n\n<resultMap type=\"User\" id=\"userMap\">\n     <result property=\"userName\" column=\"user_name\"/>\n     <result property=\"age\" column=\"age\"/>\n     <association property=\"card\" resultMap=\"cardMap\">\n     </association>\n</resultMap>\n```\n\n第二种方法就是在UserDao.xml中先定义一个Card的resultMap，然后在User的resultMap的association标签中通过resultMap=\"cardMap\"引用。这种方法相比于第一种方法较为简单。\n\n**主要是可以resultmap 复用**\n\n### 3、第三种方法:嵌套resultMap简化版\n\n```xml\n<resultMap type=\"User\" id=\"userMap\">\n   <result property=\"userName\" column=\"user_name\"/>\n   <result property=\"age\" column=\"age\"/>\n   <association property=\"card\" column=\"card_id\" javaType=\"Card\">\n      <id property=\"cardId\" column=\"card_id\"/>\n      <result property=\"cardNum\" column=\"card_num\"/>\n      <result property=\"address\" column=\"address\"/>\n    </association>\n</resultMap> \n```\n\n这种方法就把Card的resultMap定义在了association 标签里面，通过javaType来指定是哪个类的resultMap，个人认为这种方法最简单，缺点就是cardMap不能复用。具体用哪种方法，视情况而定。\n\n\n\n作者：贪挽懒月\n链接：https://www.jianshu.com/p/018c0f083501\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n### 4、Collection同 associate\n\n```xml\n<resultMap type=\"User\" id=\"userMap\">\n    <result property=\"userName\" column=\"user_name\"/>\n    <result property=\"age\" column=\"age\"/>\n    <collection property=\"mobilePhone\" column=\"user_id\" ofType=\"MobilePhone\">\n      <id column=\"mobile_phone_id\" property=\"mobilePhoneId\" />\n      <result column=\"brand\" property=\"brand\" />\n      <result column=\"price\" property=\"price\" />\n \t</collection>\n</resultMap>\n```\n\n### 5、id & result\n\n```\n<id property=\"id\" column=\"post_id\"/>\n<result property=\"subject\" column=\"post_subject\"/>\n```\n\n这些是结果映射最基本内容。id 和 result 都映射一个单独列的值到简单数据类型(字符 串,整型,双精度浮点数,日期等)的单独属性或字段。\n\n这两者之间的唯一不同是 id 表示的结果将是当比较对象实例时用到的标识属性。这帮 助来改进整体表现,特别是缓存和嵌入结果映射(也就是联合映射) 。\n\n## 总结：\n\n使用过程模仿第三种嵌套方式，不一致的是将每个关联表均设置为一个实体类，使用关联键<id>标签关联。\n\n* resultMap\n\n![image-20201008164022322](C:\\Users\\zhangkai324\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201008164022322.png)\n\n* sql\n\n```xml\n<select id=\"downloadTransform\"  parameterType=\"map\" resultMap=\"downloadEntity\">\n        select a.activity_id as 'activity_id','' as 'empty',\n           a.*,b.*,c.*\n        from\n        (<include refid=\"downloadActivityInfo\"></include>)a\n        left join\n        (<include refid=\"downloadTransformInfo\"></include>)b\n        on a.activity_id = b.activity_id\n        left join\n        (<include refid=\"getUserCountByActivity\"></include>)c\n        on a.activity_id = c.activity_id\n </select>\n```\n\n* 实体类\n\n```java\n@Data\n@Builder\n@AllArgsConstructor //全参构造函数\n@NoArgsConstructor  //无参构造函数\npublic class DownloadTransformDetailsPO {\n    private Long activityId;\n    private String empty;\n    \n    DownloadActivityPO downloadActivityPO;\n    DownloadTransformPO downloadTransformPO;\n    DownloadUserPO downloadUserPO;\n}\n```\n\n注意：\n\n@Builder只会生成有参的构造方法，会取消默认的无参构造方法。\n\n![image-20201008201207621](C:\\Users\\zhangkai324\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201008201207621.png)\n\n若关联的实体类未提供无参构造函数，可能出现indexOutofBounds异常  或者 类型不匹配，走的构造函数是有参构造函数那块。","slug":"JAVA/JAVA Mybatis 关联总结","published":1,"date":"2020-12-06T09:57:49.186Z","updated":"2020-12-06T09:57:49.382Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckid0dae50005g4l3amyuckeb","content":"<h1 id=\"JAVA-Mybatis-关联总结\"><a href=\"#JAVA-Mybatis-关联总结\" class=\"headerlink\" title=\"JAVA Mybatis 关联总结\"></a>JAVA Mybatis 关联总结</h1><h2 id=\"tip\"><a href=\"#tip\" class=\"headerlink\" title=\"tip:\"></a>tip:</h2><p>​    需求是三表关联，搞了三个实体类用activity_id做关联键，所以设计了一个实体类（包括基本类型活动号和三个表对应的三个实体类）。</p>\n<p>用到了resultMap中的associate和实体类映射。</p>\n<p><strong>association: 一对一关联(has one)</strong><br><strong>collection:一对多关联(has many)</strong></p>\n<h2 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h2><p>一对一（associate）的三种使用方式</p>\n<h3 id=\"1、第一种用法-association中使用select\"><a href=\"#1、第一种用法-association中使用select\" class=\"headerlink\" title=\"1、第一种用法:association中使用select\"></a>1、第一种用法:association中使用select</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_id&quot;</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;com.zhu.ssm.dao.      CardDao.queryCardById&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryCardById&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Card&quot;</span>&gt;</span></span><br><span class=\"line\">        SELECT *</span><br><span class=\"line\">        FROM tb_card</span><br><span class=\"line\">        WHERE card_id=#&#123;cardId&#125;</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用select是每次将 关联值 传给 column=“card_id”列</p>\n<ul>\n<li><p>嵌套查询:通过执行另外一个 SQL 映射语句来返回预期的复杂类型。会造成N+1现象，查询性能，不推荐</p>\n</li>\n<li><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>column</code></td>\n<td>来自数据库的列名,或重命名的列标签。这和通常传递给 resultSet.getString(columnName)方法的字符串是相同的。 column 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= “ {prop1=col1,prop2=col2} “ 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。</td>\n</tr>\n<tr>\n<td><code>select</code></td>\n<td>另外一个映射语句的 ID,可以加载这个属性映射需要的复杂类型。获取的 在列属性中指定的列的值将被传递给目标 select 语句作为参数。表格后面 有一个详细的示例。 select 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= “ {prop1=col1,prop2=col2} “ 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。</td>\n</tr>\n<tr>\n<td><code>fetchType</code></td>\n<td>Optional. Valid values are <code>lazy</code> and <code>eager</code>. If present, it supersedes the global configuration parameter <code>lazyLoadingEnabled</code> for this mapping.</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.w3cschool.cn/mybatis/f4uw1ilx.html\">参考示例</a></p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"2、第二种方法，嵌套resultMap\"><a href=\"#2、第二种方法，嵌套resultMap\" class=\"headerlink\" title=\"2、第二种方法，嵌套resultMap\"></a>2、第二种方法，嵌套resultMap</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Card&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cardMap&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;cardId&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_id&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;cardNum&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_num&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;address&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMap&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;cardMap&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二种方法就是在UserDao.xml中先定义一个Card的resultMap，然后在User的resultMap的association标签中通过resultMap=”cardMap”引用。这种方法相比于第一种方法较为简单。</p>\n<p><strong>主要是可以resultmap 复用</strong></p>\n<h3 id=\"3、第三种方法-嵌套resultMap简化版\"><a href=\"#3、第三种方法-嵌套resultMap简化版\" class=\"headerlink\" title=\"3、第三种方法:嵌套resultMap简化版\"></a>3、第三种方法:嵌套resultMap简化版</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMap&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_id&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Card&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;cardId&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_id&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;cardNum&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_num&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;address&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>这种方法就把Card的resultMap定义在了association 标签里面，通过javaType来指定是哪个类的resultMap，个人认为这种方法最简单，缺点就是cardMap不能复用。具体用哪种方法，视情况而定。</p>\n<p>作者：贪挽懒月<br>链接：<a href=\"https://www.jianshu.com/p/018c0f083501\">https://www.jianshu.com/p/018c0f083501</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h3 id=\"4、Collection同-associate\"><a href=\"#4、Collection同-associate\" class=\"headerlink\" title=\"4、Collection同 associate\"></a>4、Collection同 associate</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;mobilePhone&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_id&quot;</span> <span class=\"attr\">ofType</span>=<span class=\"string\">&quot;MobilePhone&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;mobile_phone_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;mobilePhoneId&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;brand&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;brand&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;price&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;price&quot;</span> /&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、id-amp-result\"><a href=\"#5、id-amp-result\" class=\"headerlink\" title=\"5、id &amp; result\"></a>5、id &amp; result</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;post_id&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;subject&quot; column&#x3D;&quot;post_subject&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这些是结果映射最基本内容。id 和 result 都映射一个单独列的值到简单数据类型(字符 串,整型,双精度浮点数,日期等)的单独属性或字段。</p>\n<p>这两者之间的唯一不同是 id 表示的结果将是当比较对象实例时用到的标识属性。这帮 助来改进整体表现,特别是缓存和嵌入结果映射(也就是联合映射) 。</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>使用过程模仿第三种嵌套方式，不一致的是将每个关联表均设置为一个实体类，使用关联键<id>标签关联。</p>\n<ul>\n<li>resultMap</li>\n</ul>\n<p><img src=\"C:\\Users\\zhangkai324\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201008164022322.png\" alt=\"image-20201008164022322\"></p>\n<ul>\n<li>sql</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;downloadTransform&quot;</span>  <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;downloadEntity&quot;</span>&gt;</span></span><br><span class=\"line\">        select a.activity_id as &#x27;activity_id&#x27;,&#x27;&#x27; as &#x27;empty&#x27;,</span><br><span class=\"line\">           a.*,b.*,c.*</span><br><span class=\"line\">        from</span><br><span class=\"line\">        (<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;downloadActivityInfo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>)a</span><br><span class=\"line\">        left join</span><br><span class=\"line\">        (<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;downloadTransformInfo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>)b</span><br><span class=\"line\">        on a.activity_id = b.activity_id</span><br><span class=\"line\">        left join</span><br><span class=\"line\">        (<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;getUserCountByActivity&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>)c</span><br><span class=\"line\">        on a.activity_id = c.activity_id</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实体类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span> <span class=\"comment\">//全参构造函数</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span>  <span class=\"comment\">//无参构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadTransformDetailsPO</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long activityId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String empty;</span><br><span class=\"line\">    </span><br><span class=\"line\">    DownloadActivityPO downloadActivityPO;</span><br><span class=\"line\">    DownloadTransformPO downloadTransformPO;</span><br><span class=\"line\">    DownloadUserPO downloadUserPO;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>@Builder只会生成有参的构造方法，会取消默认的无参构造方法。</p>\n<p><img src=\"C:\\Users\\zhangkai324\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201008201207621.png\" alt=\"image-20201008201207621\"></p>\n<p>若关联的实体类未提供无参构造函数，可能出现indexOutofBounds异常  或者 类型不匹配，走的构造函数是有参构造函数那块。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA-Mybatis-关联总结\"><a href=\"#JAVA-Mybatis-关联总结\" class=\"headerlink\" title=\"JAVA Mybatis 关联总结\"></a>JAVA Mybatis 关联总结</h1><h2 id=\"tip\"><a href=\"#tip\" class=\"headerlink\" title=\"tip:\"></a>tip:</h2><p>​    需求是三表关联，搞了三个实体类用activity_id做关联键，所以设计了一个实体类（包括基本类型活动号和三个表对应的三个实体类）。</p>\n<p>用到了resultMap中的associate和实体类映射。</p>\n<p><strong>association: 一对一关联(has one)</strong><br><strong>collection:一对多关联(has many)</strong></p>\n<h2 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h2><p>一对一（associate）的三种使用方式</p>\n<h3 id=\"1、第一种用法-association中使用select\"><a href=\"#1、第一种用法-association中使用select\" class=\"headerlink\" title=\"1、第一种用法:association中使用select\"></a>1、第一种用法:association中使用select</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_id&quot;</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;com.zhu.ssm.dao.      CardDao.queryCardById&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryCardById&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;Card&quot;</span>&gt;</span></span><br><span class=\"line\">        SELECT *</span><br><span class=\"line\">        FROM tb_card</span><br><span class=\"line\">        WHERE card_id=#&#123;cardId&#125;</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用select是每次将 关联值 传给 column=“card_id”列</p>\n<ul>\n<li><p>嵌套查询:通过执行另外一个 SQL 映射语句来返回预期的复杂类型。会造成N+1现象，查询性能，不推荐</p>\n</li>\n<li><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>column</code></td>\n<td>来自数据库的列名,或重命名的列标签。这和通常传递给 resultSet.getString(columnName)方法的字符串是相同的。 column 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= “ {prop1=col1,prop2=col2} “ 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。</td>\n</tr>\n<tr>\n<td><code>select</code></td>\n<td>另外一个映射语句的 ID,可以加载这个属性映射需要的复杂类型。获取的 在列属性中指定的列的值将被传递给目标 select 语句作为参数。表格后面 有一个详细的示例。 select 注 意 : 要 处 理 复 合 主 键 , 你 可 以 指 定 多 个 列 名 通 过 column= “ {prop1=col1,prop2=col2} “ 这种语法来传递给嵌套查询语 句。这会引起 prop1 和 prop2 以参数对象形式来设置给目标嵌套查询语句。</td>\n</tr>\n<tr>\n<td><code>fetchType</code></td>\n<td>Optional. Valid values are <code>lazy</code> and <code>eager</code>. If present, it supersedes the global configuration parameter <code>lazyLoadingEnabled</code> for this mapping.</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.w3cschool.cn/mybatis/f4uw1ilx.html\">参考示例</a></p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"2、第二种方法，嵌套resultMap\"><a href=\"#2、第二种方法，嵌套resultMap\" class=\"headerlink\" title=\"2、第二种方法，嵌套resultMap\"></a>2、第二种方法，嵌套resultMap</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Card&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cardMap&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;cardId&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_id&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;cardNum&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_num&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;address&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMap&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;cardMap&quot;</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二种方法就是在UserDao.xml中先定义一个Card的resultMap，然后在User的resultMap的association标签中通过resultMap=”cardMap”引用。这种方法相比于第一种方法较为简单。</p>\n<p><strong>主要是可以resultmap 复用</strong></p>\n<h3 id=\"3、第三种方法-嵌套resultMap简化版\"><a href=\"#3、第三种方法-嵌套resultMap简化版\" class=\"headerlink\" title=\"3、第三种方法:嵌套resultMap简化版\"></a>3、第三种方法:嵌套resultMap简化版</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMap&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_id&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Card&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;cardId&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_id&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;cardNum&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;card_num&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;address&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>这种方法就把Card的resultMap定义在了association 标签里面，通过javaType来指定是哪个类的resultMap，个人认为这种方法最简单，缺点就是cardMap不能复用。具体用哪种方法，视情况而定。</p>\n<p>作者：贪挽懒月<br>链接：<a href=\"https://www.jianshu.com/p/018c0f083501\">https://www.jianshu.com/p/018c0f083501</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h3 id=\"4、Collection同-associate\"><a href=\"#4、Collection同-associate\" class=\"headerlink\" title=\"4、Collection同 associate\"></a>4、Collection同 associate</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_name&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;age&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;mobilePhone&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_id&quot;</span> <span class=\"attr\">ofType</span>=<span class=\"string\">&quot;MobilePhone&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;mobile_phone_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;mobilePhoneId&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;brand&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;brand&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;price&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;price&quot;</span> /&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、id-amp-result\"><a href=\"#5、id-amp-result\" class=\"headerlink\" title=\"5、id &amp; result\"></a>5、id &amp; result</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;id property&#x3D;&quot;id&quot; column&#x3D;&quot;post_id&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;result property&#x3D;&quot;subject&quot; column&#x3D;&quot;post_subject&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这些是结果映射最基本内容。id 和 result 都映射一个单独列的值到简单数据类型(字符 串,整型,双精度浮点数,日期等)的单独属性或字段。</p>\n<p>这两者之间的唯一不同是 id 表示的结果将是当比较对象实例时用到的标识属性。这帮 助来改进整体表现,特别是缓存和嵌入结果映射(也就是联合映射) 。</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>使用过程模仿第三种嵌套方式，不一致的是将每个关联表均设置为一个实体类，使用关联键<id>标签关联。</p>\n<ul>\n<li>resultMap</li>\n</ul>\n<p><img src=\"C:\\Users\\zhangkai324\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201008164022322.png\" alt=\"image-20201008164022322\"></p>\n<ul>\n<li>sql</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;downloadTransform&quot;</span>  <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;map&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;downloadEntity&quot;</span>&gt;</span></span><br><span class=\"line\">        select a.activity_id as &#x27;activity_id&#x27;,&#x27;&#x27; as &#x27;empty&#x27;,</span><br><span class=\"line\">           a.*,b.*,c.*</span><br><span class=\"line\">        from</span><br><span class=\"line\">        (<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;downloadActivityInfo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>)a</span><br><span class=\"line\">        left join</span><br><span class=\"line\">        (<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;downloadTransformInfo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>)b</span><br><span class=\"line\">        on a.activity_id = b.activity_id</span><br><span class=\"line\">        left join</span><br><span class=\"line\">        (<span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">&quot;getUserCountByActivity&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span>)c</span><br><span class=\"line\">        on a.activity_id = c.activity_id</span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实体类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span> <span class=\"comment\">//全参构造函数</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span>  <span class=\"comment\">//无参构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadTransformDetailsPO</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long activityId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String empty;</span><br><span class=\"line\">    </span><br><span class=\"line\">    DownloadActivityPO downloadActivityPO;</span><br><span class=\"line\">    DownloadTransformPO downloadTransformPO;</span><br><span class=\"line\">    DownloadUserPO downloadUserPO;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>@Builder只会生成有参的构造方法，会取消默认的无参构造方法。</p>\n<p><img src=\"C:\\Users\\zhangkai324\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201008201207621.png\" alt=\"image-20201008201207621\"></p>\n<p>若关联的实体类未提供无参构造函数，可能出现indexOutofBounds异常  或者 类型不匹配，走的构造函数是有参构造函数那块。</p>\n"},{"_content":"# JAVA 请求接收Date类型OR 返回Date类型\n\n[@DateTimeFormat 和 @JsonFormat 注解](https://blog.csdn.net/zhou520yue520/article/details/81348926)\n\n\n\n==@DateFormat无效==\n\n一般都是使用@DateTimeFormat把**传给后台的时间字符串转成Date**，使用@JsonFormat**把后台传出的Date转成时间字符串**，但是@DateTimeFormat只会在类似@RequestParam的请求参数（url拼接的参数才生效，如果是放到RequestBody中的form-data也是无效的）上生效，如果@DateTimeFormat放到@RequestBody下是无效的。\n\n　　在@RequestBody中则可以使用@JsonFormat把传给后台的时间字符串转成Date，也就是说**@JsonFormat其实既可以把传给后台的时间字符串转成Date也可以把后台传出的Date转成时间字符串**。\n\n```\n@JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"GMT+8\")\nprivate Date time;\n```","source":"_posts/JAVA/JAVA 请求接收Date类型OR 返回Date类型.md","raw":"---\ncategories:\n  - JAVA\n---\n# JAVA 请求接收Date类型OR 返回Date类型\n\n[@DateTimeFormat 和 @JsonFormat 注解](https://blog.csdn.net/zhou520yue520/article/details/81348926)\n\n\n\n==@DateFormat无效==\n\n一般都是使用@DateTimeFormat把**传给后台的时间字符串转成Date**，使用@JsonFormat**把后台传出的Date转成时间字符串**，但是@DateTimeFormat只会在类似@RequestParam的请求参数（url拼接的参数才生效，如果是放到RequestBody中的form-data也是无效的）上生效，如果@DateTimeFormat放到@RequestBody下是无效的。\n\n　　在@RequestBody中则可以使用@JsonFormat把传给后台的时间字符串转成Date，也就是说**@JsonFormat其实既可以把传给后台的时间字符串转成Date也可以把后台传出的Date转成时间字符串**。\n\n```\n@JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\", timezone = \"GMT+8\")\nprivate Date time;\n```","slug":"JAVA/JAVA 请求接收Date类型OR 返回Date类型","published":1,"date":"2020-12-06T09:57:49.196Z","updated":"2020-12-06T09:57:49.382Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckid0dae50006g4l390552ljz","content":"<h1 id=\"JAVA-请求接收Date类型OR-返回Date类型\"><a href=\"#JAVA-请求接收Date类型OR-返回Date类型\" class=\"headerlink\" title=\"JAVA 请求接收Date类型OR 返回Date类型\"></a>JAVA 请求接收Date类型OR 返回Date类型</h1><p><a href=\"https://blog.csdn.net/zhou520yue520/article/details/81348926\">@DateTimeFormat 和 @JsonFormat 注解</a></p>\n<p>==@DateFormat无效==</p>\n<p>一般都是使用@DateTimeFormat把<strong>传给后台的时间字符串转成Date</strong>，使用@JsonFormat<strong>把后台传出的Date转成时间字符串</strong>，但是@DateTimeFormat只会在类似@RequestParam的请求参数（url拼接的参数才生效，如果是放到RequestBody中的form-data也是无效的）上生效，如果@DateTimeFormat放到@RequestBody下是无效的。</p>\n<p>　　在@RequestBody中则可以使用@JsonFormat把传给后台的时间字符串转成Date，也就是说**@JsonFormat其实既可以把传给后台的时间字符串转成Date也可以把后台传出的Date转成时间字符串**。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@JsonFormat(pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone &#x3D; &quot;GMT+8&quot;)</span><br><span class=\"line\">private Date time;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA-请求接收Date类型OR-返回Date类型\"><a href=\"#JAVA-请求接收Date类型OR-返回Date类型\" class=\"headerlink\" title=\"JAVA 请求接收Date类型OR 返回Date类型\"></a>JAVA 请求接收Date类型OR 返回Date类型</h1><p><a href=\"https://blog.csdn.net/zhou520yue520/article/details/81348926\">@DateTimeFormat 和 @JsonFormat 注解</a></p>\n<p>==@DateFormat无效==</p>\n<p>一般都是使用@DateTimeFormat把<strong>传给后台的时间字符串转成Date</strong>，使用@JsonFormat<strong>把后台传出的Date转成时间字符串</strong>，但是@DateTimeFormat只会在类似@RequestParam的请求参数（url拼接的参数才生效，如果是放到RequestBody中的form-data也是无效的）上生效，如果@DateTimeFormat放到@RequestBody下是无效的。</p>\n<p>　　在@RequestBody中则可以使用@JsonFormat把传给后台的时间字符串转成Date，也就是说**@JsonFormat其实既可以把传给后台的时间字符串转成Date也可以把后台传出的Date转成时间字符串**。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@JsonFormat(pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone &#x3D; &quot;GMT+8&quot;)</span><br><span class=\"line\">private Date time;</span><br></pre></td></tr></table></figure>"},{"_content":"# JAVA8 LocalDate\n\n1.获取当前时间\n\n```javacsharp\n LocalDate today = LocalDate.now();\n System.out.println(\"今天：\" + today);\n```\n\n2.获取指定日期的时间\n\n```csharp\n LocalDate appointDate = LocalDate.of(2019, 11, 1);\n System.out.println(\"2019年11月1日：\" + appointDate);\n appointDate = LocalDate.of(2019, Month.NOVEMBER, 2);\n System.out.println(\"2019年11月2日：\" + appointDate);\n```\n\n3.获取字符串的时间\n\n```csharp\n // 严格按照ISO yyyy-MM-dd验证\n LocalDate stringDate = LocalDate.parse(\"2019-11-03\");\n System.out.println(\"2019年11月3日：\" + stringDate);\n // 也可以允许自己定义格式\n stringDate = LocalDate.parse(\"20191104\", DateTimeFormatter.ofPattern(\"yyyyMMdd\"));\n System.out.println(\"2019年11月4日：\" + stringDate);\n```\n\n4.根据今天日期获取某一天\n\n```csharp\n LocalDate today = LocalDate.now();\n // 本月第一天\n LocalDate dateOfThisMonth = today.with(TemporalAdjusters.firstDayOfMonth());\n System.out.println(\"本月第一天：\" + dateOfThisMonth);\n // 本月第十天\n dateOfThisMonth = today.withDayOfMonth(10);\n System.out.println(\"本月第十天：\" + dateOfThisMonth);\n // 本月最后一天\n dateOfThisMonth = today.with(TemporalAdjusters.lastDayOfMonth());\n System.out.println(\"本月最后一天：\" + dateOfThisMonth);\n // 下个月的3号（最后一天往后推三天）\n dateOfThisMonth = dateOfThisMonth.plusDays(3);\n System.out.println(\"下个月3号：\" + dateOfThisMonth);\n // 本月第三个周三（先获取第一个周三，然后往后推14天）\n dateOfThisMonth = today.with(TemporalAdjusters.firstInMonth(DayOfWeek.WEDNESDAY)).plusDays(7 * 2);\n System.out.println(\"本月第三个周三：\" + dateOfThisMonth);\n // 下个月的第四个周四（先获取下个月的第1天，再获取第一个周四，然后往后推21天）\n dateOfThisMonth = today.with(TemporalAdjusters.firstDayOfNextMonth()).with(TemporalAdjusters.firstInMonth(DayOfWeek.THURSDAY)).plusDays(7*3);\n System.out.println(\"下个月的第四个周四：\" + dateOfThisMonth);\n```\n\n5.数据类型转换\n\n```csharp\n // 转字符串\n String todayString = LocalDate.now().toString();\n System.out.println(\"String-1：\" + todayString);\n todayString = LocalDate.now().format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n System.out.println(\"String-2：\" + todayString);\n\n // Local -> Date （这里使用的时间是0点）\n Date todayOfDate = Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant());\n System.out.println(\"todayOfDate：\" + todayOfDate);\n\n // Date -> Local\n LocalDate todayOfLocalDate = new Date().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n System.out.println(\"todayOfLocalDate：\" + todayOfLocalDate);\n```\n\n6. 获取一段周期内的日期列表\n\n```\n/**\n * 获取指定范围内所有日期，包含开始日期和结束日期\n *\n * @return List<LocalDate>\n */\npublic static List<String> getLocalDateByDay(LocalDate startDate, LocalDate endDate) {\n    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");\n    List<String> localDateList = Stream.iterate(startDate, date -> date.plusDays(1)).\n            limit(ChronoUnit.DAYS.between(startDate, endDate)).map(date -> date.format(dateTimeFormatter))\n            .collect(Collectors.toList());\n    localDateList.add(endDate.format(dateTimeFormatter));\n    return localDateList;\n}\n```\n\n7. 当前日期的下一个周日，若当前日期为周日则为今天。\n\n``` LocalDate weekEndRange = startTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));```\n\n\n\n## TODO:\n\n> * TemporalAdjusters.class\n> * ChronoUnit.class","source":"_posts/JAVA/JAVA8 LocalDate.md","raw":"---\ncategories:\n  - JAVA\n---\n# JAVA8 LocalDate\n\n1.获取当前时间\n\n```javacsharp\n LocalDate today = LocalDate.now();\n System.out.println(\"今天：\" + today);\n```\n\n2.获取指定日期的时间\n\n```csharp\n LocalDate appointDate = LocalDate.of(2019, 11, 1);\n System.out.println(\"2019年11月1日：\" + appointDate);\n appointDate = LocalDate.of(2019, Month.NOVEMBER, 2);\n System.out.println(\"2019年11月2日：\" + appointDate);\n```\n\n3.获取字符串的时间\n\n```csharp\n // 严格按照ISO yyyy-MM-dd验证\n LocalDate stringDate = LocalDate.parse(\"2019-11-03\");\n System.out.println(\"2019年11月3日：\" + stringDate);\n // 也可以允许自己定义格式\n stringDate = LocalDate.parse(\"20191104\", DateTimeFormatter.ofPattern(\"yyyyMMdd\"));\n System.out.println(\"2019年11月4日：\" + stringDate);\n```\n\n4.根据今天日期获取某一天\n\n```csharp\n LocalDate today = LocalDate.now();\n // 本月第一天\n LocalDate dateOfThisMonth = today.with(TemporalAdjusters.firstDayOfMonth());\n System.out.println(\"本月第一天：\" + dateOfThisMonth);\n // 本月第十天\n dateOfThisMonth = today.withDayOfMonth(10);\n System.out.println(\"本月第十天：\" + dateOfThisMonth);\n // 本月最后一天\n dateOfThisMonth = today.with(TemporalAdjusters.lastDayOfMonth());\n System.out.println(\"本月最后一天：\" + dateOfThisMonth);\n // 下个月的3号（最后一天往后推三天）\n dateOfThisMonth = dateOfThisMonth.plusDays(3);\n System.out.println(\"下个月3号：\" + dateOfThisMonth);\n // 本月第三个周三（先获取第一个周三，然后往后推14天）\n dateOfThisMonth = today.with(TemporalAdjusters.firstInMonth(DayOfWeek.WEDNESDAY)).plusDays(7 * 2);\n System.out.println(\"本月第三个周三：\" + dateOfThisMonth);\n // 下个月的第四个周四（先获取下个月的第1天，再获取第一个周四，然后往后推21天）\n dateOfThisMonth = today.with(TemporalAdjusters.firstDayOfNextMonth()).with(TemporalAdjusters.firstInMonth(DayOfWeek.THURSDAY)).plusDays(7*3);\n System.out.println(\"下个月的第四个周四：\" + dateOfThisMonth);\n```\n\n5.数据类型转换\n\n```csharp\n // 转字符串\n String todayString = LocalDate.now().toString();\n System.out.println(\"String-1：\" + todayString);\n todayString = LocalDate.now().format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n System.out.println(\"String-2：\" + todayString);\n\n // Local -> Date （这里使用的时间是0点）\n Date todayOfDate = Date.from(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant());\n System.out.println(\"todayOfDate：\" + todayOfDate);\n\n // Date -> Local\n LocalDate todayOfLocalDate = new Date().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n System.out.println(\"todayOfLocalDate：\" + todayOfLocalDate);\n```\n\n6. 获取一段周期内的日期列表\n\n```\n/**\n * 获取指定范围内所有日期，包含开始日期和结束日期\n *\n * @return List<LocalDate>\n */\npublic static List<String> getLocalDateByDay(LocalDate startDate, LocalDate endDate) {\n    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");\n    List<String> localDateList = Stream.iterate(startDate, date -> date.plusDays(1)).\n            limit(ChronoUnit.DAYS.between(startDate, endDate)).map(date -> date.format(dateTimeFormatter))\n            .collect(Collectors.toList());\n    localDateList.add(endDate.format(dateTimeFormatter));\n    return localDateList;\n}\n```\n\n7. 当前日期的下一个周日，若当前日期为周日则为今天。\n\n``` LocalDate weekEndRange = startTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));```\n\n\n\n## TODO:\n\n> * TemporalAdjusters.class\n> * ChronoUnit.class","slug":"JAVA/JAVA8 LocalDate","published":1,"date":"2020-12-06T09:57:49.215Z","updated":"2020-12-06T09:57:49.382Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckid0dae70008g4l3fp99fvd1","content":"<h1 id=\"JAVA8-LocalDate\"><a href=\"#JAVA8-LocalDate\" class=\"headerlink\" title=\"JAVA8 LocalDate\"></a>JAVA8 LocalDate</h1><p>1.获取当前时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalDate today &#x3D; LocalDate.now();</span><br><span class=\"line\">System.out.println(&quot;今天：&quot; + today);</span><br></pre></td></tr></table></figure>\n\n<p>2.获取指定日期的时间</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalDate appointDate = LocalDate.of(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;2019年11月1日：&quot;</span> + appointDate);</span><br><span class=\"line\">appointDate = LocalDate.of(<span class=\"number\">2019</span>, Month.NOVEMBER, <span class=\"number\">2</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;2019年11月2日：&quot;</span> + appointDate);</span><br></pre></td></tr></table></figure>\n\n<p>3.获取字符串的时间</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 严格按照ISO yyyy-MM-dd验证</span></span><br><span class=\"line\">LocalDate stringDate = LocalDate.parse(<span class=\"string\">&quot;2019-11-03&quot;</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;2019年11月3日：&quot;</span> + stringDate);</span><br><span class=\"line\"><span class=\"comment\">// 也可以允许自己定义格式</span></span><br><span class=\"line\">stringDate = LocalDate.parse(<span class=\"string\">&quot;20191104&quot;</span>, DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyyMMdd&quot;</span>));</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;2019年11月4日：&quot;</span> + stringDate);</span><br></pre></td></tr></table></figure>\n\n<p>4.根据今天日期获取某一天</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalDate today = LocalDate.now();</span><br><span class=\"line\"><span class=\"comment\">// 本月第一天</span></span><br><span class=\"line\">LocalDate dateOfThisMonth = today.<span class=\"keyword\">with</span>(TemporalAdjusters.firstDayOfMonth());</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;本月第一天：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 本月第十天</span></span><br><span class=\"line\">dateOfThisMonth = today.withDayOfMonth(<span class=\"number\">10</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;本月第十天：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 本月最后一天</span></span><br><span class=\"line\">dateOfThisMonth = today.<span class=\"keyword\">with</span>(TemporalAdjusters.lastDayOfMonth());</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;本月最后一天：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 下个月的3号（最后一天往后推三天）</span></span><br><span class=\"line\">dateOfThisMonth = dateOfThisMonth.plusDays(<span class=\"number\">3</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;下个月3号：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 本月第三个周三（先获取第一个周三，然后往后推14天）</span></span><br><span class=\"line\">dateOfThisMonth = today.<span class=\"keyword\">with</span>(TemporalAdjusters.firstInMonth(DayOfWeek.WEDNESDAY)).plusDays(<span class=\"number\">7</span> * <span class=\"number\">2</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;本月第三个周三：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 下个月的第四个周四（先获取下个月的第1天，再获取第一个周四，然后往后推21天）</span></span><br><span class=\"line\">dateOfThisMonth = today.<span class=\"keyword\">with</span>(TemporalAdjusters.firstDayOfNextMonth()).<span class=\"keyword\">with</span>(TemporalAdjusters.firstInMonth(DayOfWeek.THURSDAY)).plusDays(<span class=\"number\">7</span>*<span class=\"number\">3</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;下个月的第四个周四：&quot;</span> + dateOfThisMonth);</span><br></pre></td></tr></table></figure>\n\n<p>5.数据类型转换</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转字符串</span></span><br><span class=\"line\">String todayString = LocalDate.now().toString();</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;String-1：&quot;</span> + todayString);</span><br><span class=\"line\">todayString = LocalDate.now().format(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy/MM/dd&quot;</span>));</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;String-2：&quot;</span> + todayString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Local -&gt; Date （这里使用的时间是0点）</span></span><br><span class=\"line\">Date todayOfDate = Date.<span class=\"keyword\">from</span>(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant());</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;todayOfDate：&quot;</span> + todayOfDate);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Date -&gt; Local</span></span><br><span class=\"line\">LocalDate todayOfLocalDate = <span class=\"keyword\">new</span> Date().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;todayOfLocalDate：&quot;</span> + todayOfLocalDate);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>获取一段周期内的日期列表</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 获取指定范围内所有日期，包含开始日期和结束日期</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @return List&lt;LocalDate&gt;</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static List&lt;String&gt; getLocalDateByDay(LocalDate startDate, LocalDate endDate) &#123;</span><br><span class=\"line\">    DateTimeFormatter dateTimeFormatter &#x3D; DateTimeFormatter.ofPattern(&quot;yyyy&#x2F;MM&#x2F;dd&quot;);</span><br><span class=\"line\">    List&lt;String&gt; localDateList &#x3D; Stream.iterate(startDate, date -&gt; date.plusDays(1)).</span><br><span class=\"line\">            limit(ChronoUnit.DAYS.between(startDate, endDate)).map(date -&gt; date.format(dateTimeFormatter))</span><br><span class=\"line\">            .collect(Collectors.toList());</span><br><span class=\"line\">    localDateList.add(endDate.format(dateTimeFormatter));</span><br><span class=\"line\">    return localDateList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>当前日期的下一个周日，若当前日期为周日则为今天。</li>\n</ol>\n<p><code> LocalDate weekEndRange = startTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));</code></p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO:\"></a>TODO:</h2><blockquote>\n<ul>\n<li>TemporalAdjusters.class</li>\n<li>ChronoUnit.class</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JAVA8-LocalDate\"><a href=\"#JAVA8-LocalDate\" class=\"headerlink\" title=\"JAVA8 LocalDate\"></a>JAVA8 LocalDate</h1><p>1.获取当前时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalDate today &#x3D; LocalDate.now();</span><br><span class=\"line\">System.out.println(&quot;今天：&quot; + today);</span><br></pre></td></tr></table></figure>\n\n<p>2.获取指定日期的时间</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalDate appointDate = LocalDate.of(<span class=\"number\">2019</span>, <span class=\"number\">11</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;2019年11月1日：&quot;</span> + appointDate);</span><br><span class=\"line\">appointDate = LocalDate.of(<span class=\"number\">2019</span>, Month.NOVEMBER, <span class=\"number\">2</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;2019年11月2日：&quot;</span> + appointDate);</span><br></pre></td></tr></table></figure>\n\n<p>3.获取字符串的时间</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 严格按照ISO yyyy-MM-dd验证</span></span><br><span class=\"line\">LocalDate stringDate = LocalDate.parse(<span class=\"string\">&quot;2019-11-03&quot;</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;2019年11月3日：&quot;</span> + stringDate);</span><br><span class=\"line\"><span class=\"comment\">// 也可以允许自己定义格式</span></span><br><span class=\"line\">stringDate = LocalDate.parse(<span class=\"string\">&quot;20191104&quot;</span>, DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyyMMdd&quot;</span>));</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;2019年11月4日：&quot;</span> + stringDate);</span><br></pre></td></tr></table></figure>\n\n<p>4.根据今天日期获取某一天</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LocalDate today = LocalDate.now();</span><br><span class=\"line\"><span class=\"comment\">// 本月第一天</span></span><br><span class=\"line\">LocalDate dateOfThisMonth = today.<span class=\"keyword\">with</span>(TemporalAdjusters.firstDayOfMonth());</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;本月第一天：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 本月第十天</span></span><br><span class=\"line\">dateOfThisMonth = today.withDayOfMonth(<span class=\"number\">10</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;本月第十天：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 本月最后一天</span></span><br><span class=\"line\">dateOfThisMonth = today.<span class=\"keyword\">with</span>(TemporalAdjusters.lastDayOfMonth());</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;本月最后一天：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 下个月的3号（最后一天往后推三天）</span></span><br><span class=\"line\">dateOfThisMonth = dateOfThisMonth.plusDays(<span class=\"number\">3</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;下个月3号：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 本月第三个周三（先获取第一个周三，然后往后推14天）</span></span><br><span class=\"line\">dateOfThisMonth = today.<span class=\"keyword\">with</span>(TemporalAdjusters.firstInMonth(DayOfWeek.WEDNESDAY)).plusDays(<span class=\"number\">7</span> * <span class=\"number\">2</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;本月第三个周三：&quot;</span> + dateOfThisMonth);</span><br><span class=\"line\"><span class=\"comment\">// 下个月的第四个周四（先获取下个月的第1天，再获取第一个周四，然后往后推21天）</span></span><br><span class=\"line\">dateOfThisMonth = today.<span class=\"keyword\">with</span>(TemporalAdjusters.firstDayOfNextMonth()).<span class=\"keyword\">with</span>(TemporalAdjusters.firstInMonth(DayOfWeek.THURSDAY)).plusDays(<span class=\"number\">7</span>*<span class=\"number\">3</span>);</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;下个月的第四个周四：&quot;</span> + dateOfThisMonth);</span><br></pre></td></tr></table></figure>\n\n<p>5.数据类型转换</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转字符串</span></span><br><span class=\"line\">String todayString = LocalDate.now().toString();</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;String-1：&quot;</span> + todayString);</span><br><span class=\"line\">todayString = LocalDate.now().format(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy/MM/dd&quot;</span>));</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;String-2：&quot;</span> + todayString);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Local -&gt; Date （这里使用的时间是0点）</span></span><br><span class=\"line\">Date todayOfDate = Date.<span class=\"keyword\">from</span>(LocalDate.now().atStartOfDay(ZoneId.systemDefault()).toInstant());</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;todayOfDate：&quot;</span> + todayOfDate);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Date -&gt; Local</span></span><br><span class=\"line\">LocalDate todayOfLocalDate = <span class=\"keyword\">new</span> Date().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class=\"line\">System.<span class=\"keyword\">out</span>.println(<span class=\"string\">&quot;todayOfLocalDate：&quot;</span> + todayOfLocalDate);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>获取一段周期内的日期列表</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 获取指定范围内所有日期，包含开始日期和结束日期</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @return List&lt;LocalDate&gt;</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public static List&lt;String&gt; getLocalDateByDay(LocalDate startDate, LocalDate endDate) &#123;</span><br><span class=\"line\">    DateTimeFormatter dateTimeFormatter &#x3D; DateTimeFormatter.ofPattern(&quot;yyyy&#x2F;MM&#x2F;dd&quot;);</span><br><span class=\"line\">    List&lt;String&gt; localDateList &#x3D; Stream.iterate(startDate, date -&gt; date.plusDays(1)).</span><br><span class=\"line\">            limit(ChronoUnit.DAYS.between(startDate, endDate)).map(date -&gt; date.format(dateTimeFormatter))</span><br><span class=\"line\">            .collect(Collectors.toList());</span><br><span class=\"line\">    localDateList.add(endDate.format(dateTimeFormatter));</span><br><span class=\"line\">    return localDateList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>当前日期的下一个周日，若当前日期为周日则为今天。</li>\n</ol>\n<p><code> LocalDate weekEndRange = startTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));</code></p>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO:\"></a>TODO:</h2><blockquote>\n<ul>\n<li>TemporalAdjusters.class</li>\n<li>ChronoUnit.class</li>\n</ul>\n</blockquote>\n"},{"_content":"# MYSQL 总结\n\n## 1. tip\n\n* mysql建表不能重复列名，表关联或者起别名可以重复列名，即 ```a.*,b.*（包括a.activityId,b.activityId）```是可以的。\n* \n\n## 2.语法\n\n1.  mybatis 分页加序号\n\n\n> ```sql\n> select (@mycnt := cast(@mycnt as SIGNED)+1) as rownum,\n>      b.* \n> from(\n> \tselect * from xx\n>   limit #{pageInfo.startRow}, #{pageInfo.pageSize}\n>  )b , (select @mycnt := #{pageInfo.startRow})  num\n> ```\n\n2. 时间sql\n\n   ```sql\n   -- between and\n   activity_dt between date('2020-09-01 00:00:00.0') and date('2020-09-29 00:00:00.0') and activity_dt between date(start_time) and date_add(end_time, interval 60 day)\n   -- 格式化\n   date_format(activity_dt, '%Y-%m-%d') startActivityDt \n   -- 按周统计，当前日期所在周的周一\n   DATE_FORMAT(STR_TO_DATE(CONCAT(YEAR(activity_dt),weekofyear(activity_dt )-1,'Monday') , '%X %V %W %u'), '%Y-%m-%d') as startActivityDt\n   DATE_FORMAT(STR_TO_DATE(CONCAT(YEAR(activity_dt),weekofyear(activity_dt ),'Sunday') , '%X %V %W %u'), '%Y-%m-%d') as endActivityDt ,\n           \n   -- 按月统计，月初以及月末日期\n    DATE_ADD(activity_dt,interval -day(activity_dt)+1 day) as startActivityDt,\n    last_day(activity_dt) as endActivityDt ,\n   -- 按季统计\n    -- 当前quarter的第一天：\n   concat(date_format(LAST_DAY(MAKEDATE(EXTRACT(YEAR FROM  activity_dt),1) + interval QUARTER(activity_dt)*3-3 month),'%Y-%m-'),'01') as startActivityDt,\n    -- 当前quarter的最后一天：\n   LAST_DAY(MAKEDATE(EXTRACT(YEAR  FROM activity_dt),1) + interval QUARTER(activity_dt)*3-1 month)as endActivityDt,\n   ```\n\n3. ","source":"_posts/Mysql/MYSQL 总结.md","raw":"---\ncategories:\n  - Mysql\n---\n# MYSQL 总结\n\n## 1. tip\n\n* mysql建表不能重复列名，表关联或者起别名可以重复列名，即 ```a.*,b.*（包括a.activityId,b.activityId）```是可以的。\n* \n\n## 2.语法\n\n1.  mybatis 分页加序号\n\n\n> ```sql\n> select (@mycnt := cast(@mycnt as SIGNED)+1) as rownum,\n>      b.* \n> from(\n> \tselect * from xx\n>   limit #{pageInfo.startRow}, #{pageInfo.pageSize}\n>  )b , (select @mycnt := #{pageInfo.startRow})  num\n> ```\n\n2. 时间sql\n\n   ```sql\n   -- between and\n   activity_dt between date('2020-09-01 00:00:00.0') and date('2020-09-29 00:00:00.0') and activity_dt between date(start_time) and date_add(end_time, interval 60 day)\n   -- 格式化\n   date_format(activity_dt, '%Y-%m-%d') startActivityDt \n   -- 按周统计，当前日期所在周的周一\n   DATE_FORMAT(STR_TO_DATE(CONCAT(YEAR(activity_dt),weekofyear(activity_dt )-1,'Monday') , '%X %V %W %u'), '%Y-%m-%d') as startActivityDt\n   DATE_FORMAT(STR_TO_DATE(CONCAT(YEAR(activity_dt),weekofyear(activity_dt ),'Sunday') , '%X %V %W %u'), '%Y-%m-%d') as endActivityDt ,\n           \n   -- 按月统计，月初以及月末日期\n    DATE_ADD(activity_dt,interval -day(activity_dt)+1 day) as startActivityDt,\n    last_day(activity_dt) as endActivityDt ,\n   -- 按季统计\n    -- 当前quarter的第一天：\n   concat(date_format(LAST_DAY(MAKEDATE(EXTRACT(YEAR FROM  activity_dt),1) + interval QUARTER(activity_dt)*3-3 month),'%Y-%m-'),'01') as startActivityDt,\n    -- 当前quarter的最后一天：\n   LAST_DAY(MAKEDATE(EXTRACT(YEAR  FROM activity_dt),1) + interval QUARTER(activity_dt)*3-1 month)as endActivityDt,\n   ```\n\n3. ","slug":"Mysql/MYSQL 总结","published":1,"date":"2020-12-06T09:58:13.279Z","updated":"2020-12-06T09:58:15.703Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ckid0dae80009g4l3gj9h990q","content":"<h1 id=\"MYSQL-总结\"><a href=\"#MYSQL-总结\" class=\"headerlink\" title=\"MYSQL 总结\"></a>MYSQL 总结</h1><h2 id=\"1-tip\"><a href=\"#1-tip\" class=\"headerlink\" title=\"1. tip\"></a>1. tip</h2><ul>\n<li>mysql建表不能重复列名，表关联或者起别名可以重复列名，即 <code>a.*,b.*（包括a.activityId,b.activityId）</code>是可以的。</li>\n<li></li>\n</ul>\n<h2 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2.语法\"></a>2.语法</h2><ol>\n<li> mybatis 分页加序号</li>\n</ol>\n<blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> (@mycnt := <span class=\"keyword\">cast</span>(@mycnt <span class=\"keyword\">as</span> SIGNED)+<span class=\"number\">1</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">rownum</span>,</span><br><span class=\"line\">     b.* </span><br><span class=\"line\"><span class=\"keyword\">from</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> xx</span><br><span class=\"line\">  <span class=\"keyword\">limit</span> <span class=\"comment\">#&#123;pageInfo.startRow&#125;, #&#123;pageInfo.pageSize&#125;</span></span><br><span class=\"line\"> )b , (<span class=\"keyword\">select</span> @mycnt := <span class=\"comment\">#&#123;pageInfo.startRow&#125;)  num</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ol start=\"2\">\n<li><p>时间sql</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- between and</span></span><br><span class=\"line\">activity_dt between date(&#x27;2020-09-01 00:00:00.0&#x27;) and date(&#x27;2020-09-29 00:00:00.0&#x27;) and activity_dt between date(start_time) and date_add(end_time, interval 60 day)</span><br><span class=\"line\"><span class=\"comment\">-- 格式化</span></span><br><span class=\"line\">date_format(activity_dt, &#x27;%Y-%m-%d&#x27;) startActivityDt </span><br><span class=\"line\"><span class=\"comment\">-- 按周统计，当前日期所在周的周一</span></span><br><span class=\"line\">DATE_FORMAT(STR_TO_DATE(CONCAT(YEAR(activity_dt),weekofyear(activity_dt )-1,&#x27;Monday&#x27;) , &#x27;%X %V %W %u&#x27;), &#x27;%Y-%m-%d&#x27;) as startActivityDt</span><br><span class=\"line\">DATE_FORMAT(STR_TO_DATE(CONCAT(YEAR(activity_dt),weekofyear(activity_dt ),&#x27;Sunday&#x27;) , &#x27;%X %V %W %u&#x27;), &#x27;%Y-%m-%d&#x27;) as endActivityDt ,</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">-- 按月统计，月初以及月末日期</span></span><br><span class=\"line\"> DATE_ADD(activity_dt,interval -day(activity_dt)+1 day) as startActivityDt,</span><br><span class=\"line\"> last_day(activity_dt) as endActivityDt ,</span><br><span class=\"line\"><span class=\"comment\">-- 按季统计</span></span><br><span class=\"line\"> <span class=\"comment\">-- 当前quarter的第一天：</span></span><br><span class=\"line\">concat(date_format(LAST_DAY(MAKEDATE(EXTRACT(YEAR FROM  activity_dt),1) + interval QUARTER(activity_dt)*3-3 month),&#x27;%Y-%m-&#x27;),&#x27;01&#x27;) as startActivityDt,</span><br><span class=\"line\"> <span class=\"comment\">-- 当前quarter的最后一天：</span></span><br><span class=\"line\">LAST_DAY(MAKEDATE(EXTRACT(YEAR  FROM activity_dt),1) + interval QUARTER(activity_dt)*3-1 month)as endActivityDt,</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MYSQL-总结\"><a href=\"#MYSQL-总结\" class=\"headerlink\" title=\"MYSQL 总结\"></a>MYSQL 总结</h1><h2 id=\"1-tip\"><a href=\"#1-tip\" class=\"headerlink\" title=\"1. tip\"></a>1. tip</h2><ul>\n<li>mysql建表不能重复列名，表关联或者起别名可以重复列名，即 <code>a.*,b.*（包括a.activityId,b.activityId）</code>是可以的。</li>\n<li></li>\n</ul>\n<h2 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2.语法\"></a>2.语法</h2><ol>\n<li> mybatis 分页加序号</li>\n</ol>\n<blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> (@mycnt := <span class=\"keyword\">cast</span>(@mycnt <span class=\"keyword\">as</span> SIGNED)+<span class=\"number\">1</span>) <span class=\"keyword\">as</span> <span class=\"keyword\">rownum</span>,</span><br><span class=\"line\">     b.* </span><br><span class=\"line\"><span class=\"keyword\">from</span>(</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> xx</span><br><span class=\"line\">  <span class=\"keyword\">limit</span> <span class=\"comment\">#&#123;pageInfo.startRow&#125;, #&#123;pageInfo.pageSize&#125;</span></span><br><span class=\"line\"> )b , (<span class=\"keyword\">select</span> @mycnt := <span class=\"comment\">#&#123;pageInfo.startRow&#125;)  num</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ol start=\"2\">\n<li><p>时间sql</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- between and</span></span><br><span class=\"line\">activity_dt between date(&#x27;2020-09-01 00:00:00.0&#x27;) and date(&#x27;2020-09-29 00:00:00.0&#x27;) and activity_dt between date(start_time) and date_add(end_time, interval 60 day)</span><br><span class=\"line\"><span class=\"comment\">-- 格式化</span></span><br><span class=\"line\">date_format(activity_dt, &#x27;%Y-%m-%d&#x27;) startActivityDt </span><br><span class=\"line\"><span class=\"comment\">-- 按周统计，当前日期所在周的周一</span></span><br><span class=\"line\">DATE_FORMAT(STR_TO_DATE(CONCAT(YEAR(activity_dt),weekofyear(activity_dt )-1,&#x27;Monday&#x27;) , &#x27;%X %V %W %u&#x27;), &#x27;%Y-%m-%d&#x27;) as startActivityDt</span><br><span class=\"line\">DATE_FORMAT(STR_TO_DATE(CONCAT(YEAR(activity_dt),weekofyear(activity_dt ),&#x27;Sunday&#x27;) , &#x27;%X %V %W %u&#x27;), &#x27;%Y-%m-%d&#x27;) as endActivityDt ,</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">-- 按月统计，月初以及月末日期</span></span><br><span class=\"line\"> DATE_ADD(activity_dt,interval -day(activity_dt)+1 day) as startActivityDt,</span><br><span class=\"line\"> last_day(activity_dt) as endActivityDt ,</span><br><span class=\"line\"><span class=\"comment\">-- 按季统计</span></span><br><span class=\"line\"> <span class=\"comment\">-- 当前quarter的第一天：</span></span><br><span class=\"line\">concat(date_format(LAST_DAY(MAKEDATE(EXTRACT(YEAR FROM  activity_dt),1) + interval QUARTER(activity_dt)*3-3 month),&#x27;%Y-%m-&#x27;),&#x27;01&#x27;) as startActivityDt,</span><br><span class=\"line\"> <span class=\"comment\">-- 当前quarter的最后一天：</span></span><br><span class=\"line\">LAST_DAY(MAKEDATE(EXTRACT(YEAR  FROM activity_dt),1) + interval QUARTER(activity_dt)*3-1 month)as endActivityDt,</span><br></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n"},{"title":"GitPage + Hexo + PicGo","date":"2020-12-05T12:52:57.228Z","author":"zk","description":"搭建免费静态文本网站","_content":"# GitPage\n\n作者：工匠羅\n链接：https://www.zhihu.com/question/59088760/answer/265741938\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n\n搭建这个博客走了许多弯路。在这里分享总结之后的思路和简化步骤。\n\n- Github Pages\n- Hexo 博客框架\n- 部署\n- Next 主题\n\n## **Github Pages**\n\nGithub Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。\n\n**操作如下：** \n\n**1. 注册 Github 账号，然后在 Github 中创建一个以 .[http://github.io](https://link.zhihu.com/?target=http%3A//github.io) 结尾的 Repository。**\n\n1. 1. Repository name: [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io)\n   2. 勾选 Initialize this repository with a README\n   3. Create repository\n\n**2. 简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存(Commit changes)。**\n\n**3. 打开网页：[http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io) 这里就可以看到 README.md 里的内容了。**\n\n\n\n如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io) 这个网页显示出来。\n\n## **Hexo**\n\nHexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。\n\n使用 Hexo 之前，需要先安装 Node.js 和 Git。\n\n**操作如下：**\n\n**1. 安装 Node.js**\n\n- 前往 [https://nodejs.org/en/](https://link.zhihu.com/?target=https%3A//nodejs.org/en/)\n- 点击 8.9.1 LTS 下载\n- 安装\n- 打开 Command Prompt， 输入 `node -v`\n- 得到：v8.9.1\n\n安装成功\n\n\n\n**2. 安装 Git**\n\n- 前往 [https://git-scm.com/](https://link.zhihu.com/?target=https%3A//git-scm.com/)\n- 点击 Downloads\n- 点击 Windows\n- 一般情况，下载会自动开始。如果没有，就点击 click here to download manually\n- 安装\n- 打开 Command Prompt， 输入 `git --version`\n- 得到：git version 2.15.0.windows.1\n\n安装成功\n\n额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。\n\n\n\n**3. 安装 Hexo**\n\n- - 打开 Command Prompt\n  - 输入 `npm install -g hexo-cli`\n  - 回车开始安装\n  - 输入 `hexo -v`\n  - 得到 hexo-cli: 1.0.4 等一串数据\n\n安装成功\n\n\n\n**4. 创建本地博客**\n\n- - 在D盘下创建文件夹 blog\n  - 鼠标右键 blog，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。\n  - Git Bash 打开之后，所在的位置就是 blog 这个文件夹的位置。（/d/blog）\n  - 输入 `hexo init` 将 blog 文件夹初始化成一个博客文件夹。\n  - 输入 `npm install` 安装依赖包。\n  - 输入 `hexo g` 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。\n  - 输入 `hexo s` 将生成的网页放在了本地服务器（server）。\n  - 浏览器里输入 [http://localhost:4000/](https://link.zhihu.com/?target=http%3A//localhost%3A4000/) 。 就可以看到刚才的成果了。\n  - 回到 Git Bash，按 Ctrl+C 结束。\n\n此时再看 [http://localhost:4000/](https://link.zhihu.com/?target=http%3A//localhost%3A4000/) 就是无法访问了。\n\n\n\n**5. 发布一篇博客**\n\n- - 继续在 Git Bash 里，所在路径还是 /d/blog。输入 `hexo new \"My First Post\"`\n  - 在 D:\\blog\\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。\n  - 回到 Git Bash，输入 `hexo g`\n  - 输入 `hexo s`\n  - 前往 [http://localhost:4000/](https://link.zhihu.com/?target=http%3A//localhost%3A4000/) 查看成果。\n  - 回到 Git Bash，按 Ctrl+C 结束。\n\n\n\n## **将本地 Hexo 博客部署在 Github 上**\n\n前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。\n\n**1. 获取 Github 对应的 Repository 的链接。**\n\n- 登陆 Github，进入到 [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io)\n- 点击 Clone or download\n- 复制 URL 待用\n\n我的是 `https://github.com/Ryanluoxu/ryanluoxu.github.io.git`\n\n\n\n**2. 修改博客的配置文件**\n\n- - 打开配置文件 /d/blog/_config.yml （使用 bash 里的 vi 或者 notepad++）\n  - 找到 `#Deployment`，填入以下内容：\n\n```\ndeploy:    type: git    repository: https://github.com/Ryanluoxu/ryanluoxu.github.io.git    branch: master \n保存退出\n```\n\n\n\n**3. 部署**\n\n- - 回到 Git Bash\n  - 输入 `npm install hexo-deployer-git --save` 安装 hexo-deployer-git 此步骤只需要做一次。\n  - 输入 `hexo d`\n  - 得到 `INFO Deploy done: git` 即为部署成功\n\n之前我们创建的 ReadMe.md 会被自动覆盖掉。\n\n\n\n**4. 查看成果**\n\n前往 [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io) 即可。\n\n\n\n## **使用 Next 主题**\n\n[更多 Hexo 的主题看这里](https://link.zhihu.com/?target=https%3A//hexo.io/themes/)\n\n这里以 Next 为例。 大概思路就是把整个主题的文件克隆到我们的主题文件夹中。在配置文件中注明使用该主题。\n\n**操作如下：**\n\n**1. 还是回到 Git Bash。 输入** `git clone https://github.com/iissnan/hexo-theme-next themes/next`\n\n这样，该主题的文件就全部克隆到 D:\\blog\\themes\\next 下面。\n\n\n\n**2. 修改博客配置文件**\n\n- - 打开 D:\\blog_config.yml\n  - 找到 `theme:`\n  - 把 Hexo 默认的 lanscape 修改成 next。 即 `theme: next`\n  - 找到 `# Site`，添加博客名称，作者名字等。\n  - 在 `language` 后面填入 en 或者 zh-Hans，选择英文或者中文。\n  - 找到 `# URL`, 填入 url。比如 `url: https://ryanluoxu.github.io`\n\n填入名字后会有很风骚的 © 2017 Ryan Luo Xu 的字样出现在博客底部。\n\n\n\n**3. 重新生成部署即可**\n\n- - 回到 Git Bash。输入 `hexo g -d`就可以了。\n\n先把修改的内容生成网页，再部署。\n\n\n\n**4. 查看成果**\n\n前往 [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io) 即可。\n\n搭建好之后，继续个性化的设置参考：''''\n\n## 配置 PicGo (CDN 加速)\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6pMTyqIZuaRkfbRXUmLpicpyfjpGRRUVyww2cS88fa5nRkcBb5eA0PQA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n- 仓库名：用户名/仓库名\n- 分支名：所属分支\n- token：\n\n- ![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6ZIhtiblBUicYOf3pJlujt4WKiavibPjnSfWawA2jKWZ5I76FFp83fccN5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n- 指定路径：仓库下的指定文件夹\n- 自定义域名：使用了 CDN 加速，配置格式为：\n\n\n```\nhttps://cdn.jsdelivr.net/gh/用户名/仓库名\n```\n\n\n\n**设置 Typora**\n\n\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6KE2AgAOzPrLYBIic0Gh5Q064ymU8EqzmWJJj8XfibialoaatcmN1QSteg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6pQhFF2BIEQDWNQrFom7jCibf1fBZm4miaWECib807y0EpohrS3YBDRwOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n如果出现以下情况：\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6z8OSeopfdNCF3icI5y5DulNHaibw72wcb3js7lwWFh5KSZarFa9u1qKQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n点击PicGo界面左侧的PicGo设置->设置Server，并按下图设置（默认已设置）\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6zdIaCw3R0mibSs3GzEvLtFrEVWW9BkFI1cwHticw8b5KDlHvOIPn3aicA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n至此，便可通过 Typora 优雅的编写 Markdown 文档，图片粘贴到文档就能够自动上传到 github 图床了。\n\n** **\n\n![image-20201205205536651](https://raw.githubusercontent.com/ly1246621281/PicGo/main/img/image-20201205205536651.png)","source":"_posts/Others/GitPage.md","raw":"---\ntitle: GitPage + Hexo + PicGo\ndate: {{date}}\nauthor: zk\ncategories:\n  - Others\ntags: [hexo,website,前端]\ndescription: 搭建免费静态文本网站 \n---\n# GitPage\n\n作者：工匠羅\n链接：https://www.zhihu.com/question/59088760/answer/265741938\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n\n搭建这个博客走了许多弯路。在这里分享总结之后的思路和简化步骤。\n\n- Github Pages\n- Hexo 博客框架\n- 部署\n- Next 主题\n\n## **Github Pages**\n\nGithub Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。\n\n**操作如下：** \n\n**1. 注册 Github 账号，然后在 Github 中创建一个以 .[http://github.io](https://link.zhihu.com/?target=http%3A//github.io) 结尾的 Repository。**\n\n1. 1. Repository name: [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io)\n   2. 勾选 Initialize this repository with a README\n   3. Create repository\n\n**2. 简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存(Commit changes)。**\n\n**3. 打开网页：[http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io) 这里就可以看到 README.md 里的内容了。**\n\n\n\n如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io) 这个网页显示出来。\n\n## **Hexo**\n\nHexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。\n\n使用 Hexo 之前，需要先安装 Node.js 和 Git。\n\n**操作如下：**\n\n**1. 安装 Node.js**\n\n- 前往 [https://nodejs.org/en/](https://link.zhihu.com/?target=https%3A//nodejs.org/en/)\n- 点击 8.9.1 LTS 下载\n- 安装\n- 打开 Command Prompt， 输入 `node -v`\n- 得到：v8.9.1\n\n安装成功\n\n\n\n**2. 安装 Git**\n\n- 前往 [https://git-scm.com/](https://link.zhihu.com/?target=https%3A//git-scm.com/)\n- 点击 Downloads\n- 点击 Windows\n- 一般情况，下载会自动开始。如果没有，就点击 click here to download manually\n- 安装\n- 打开 Command Prompt， 输入 `git --version`\n- 得到：git version 2.15.0.windows.1\n\n安装成功\n\n额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。\n\n\n\n**3. 安装 Hexo**\n\n- - 打开 Command Prompt\n  - 输入 `npm install -g hexo-cli`\n  - 回车开始安装\n  - 输入 `hexo -v`\n  - 得到 hexo-cli: 1.0.4 等一串数据\n\n安装成功\n\n\n\n**4. 创建本地博客**\n\n- - 在D盘下创建文件夹 blog\n  - 鼠标右键 blog，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。\n  - Git Bash 打开之后，所在的位置就是 blog 这个文件夹的位置。（/d/blog）\n  - 输入 `hexo init` 将 blog 文件夹初始化成一个博客文件夹。\n  - 输入 `npm install` 安装依赖包。\n  - 输入 `hexo g` 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。\n  - 输入 `hexo s` 将生成的网页放在了本地服务器（server）。\n  - 浏览器里输入 [http://localhost:4000/](https://link.zhihu.com/?target=http%3A//localhost%3A4000/) 。 就可以看到刚才的成果了。\n  - 回到 Git Bash，按 Ctrl+C 结束。\n\n此时再看 [http://localhost:4000/](https://link.zhihu.com/?target=http%3A//localhost%3A4000/) 就是无法访问了。\n\n\n\n**5. 发布一篇博客**\n\n- - 继续在 Git Bash 里，所在路径还是 /d/blog。输入 `hexo new \"My First Post\"`\n  - 在 D:\\blog\\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。\n  - 回到 Git Bash，输入 `hexo g`\n  - 输入 `hexo s`\n  - 前往 [http://localhost:4000/](https://link.zhihu.com/?target=http%3A//localhost%3A4000/) 查看成果。\n  - 回到 Git Bash，按 Ctrl+C 结束。\n\n\n\n## **将本地 Hexo 博客部署在 Github 上**\n\n前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。\n\n**1. 获取 Github 对应的 Repository 的链接。**\n\n- 登陆 Github，进入到 [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io)\n- 点击 Clone or download\n- 复制 URL 待用\n\n我的是 `https://github.com/Ryanluoxu/ryanluoxu.github.io.git`\n\n\n\n**2. 修改博客的配置文件**\n\n- - 打开配置文件 /d/blog/_config.yml （使用 bash 里的 vi 或者 notepad++）\n  - 找到 `#Deployment`，填入以下内容：\n\n```\ndeploy:    type: git    repository: https://github.com/Ryanluoxu/ryanluoxu.github.io.git    branch: master \n保存退出\n```\n\n\n\n**3. 部署**\n\n- - 回到 Git Bash\n  - 输入 `npm install hexo-deployer-git --save` 安装 hexo-deployer-git 此步骤只需要做一次。\n  - 输入 `hexo d`\n  - 得到 `INFO Deploy done: git` 即为部署成功\n\n之前我们创建的 ReadMe.md 会被自动覆盖掉。\n\n\n\n**4. 查看成果**\n\n前往 [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io) 即可。\n\n\n\n## **使用 Next 主题**\n\n[更多 Hexo 的主题看这里](https://link.zhihu.com/?target=https%3A//hexo.io/themes/)\n\n这里以 Next 为例。 大概思路就是把整个主题的文件克隆到我们的主题文件夹中。在配置文件中注明使用该主题。\n\n**操作如下：**\n\n**1. 还是回到 Git Bash。 输入** `git clone https://github.com/iissnan/hexo-theme-next themes/next`\n\n这样，该主题的文件就全部克隆到 D:\\blog\\themes\\next 下面。\n\n\n\n**2. 修改博客配置文件**\n\n- - 打开 D:\\blog_config.yml\n  - 找到 `theme:`\n  - 把 Hexo 默认的 lanscape 修改成 next。 即 `theme: next`\n  - 找到 `# Site`，添加博客名称，作者名字等。\n  - 在 `language` 后面填入 en 或者 zh-Hans，选择英文或者中文。\n  - 找到 `# URL`, 填入 url。比如 `url: https://ryanluoxu.github.io`\n\n填入名字后会有很风骚的 © 2017 Ryan Luo Xu 的字样出现在博客底部。\n\n\n\n**3. 重新生成部署即可**\n\n- - 回到 Git Bash。输入 `hexo g -d`就可以了。\n\n先把修改的内容生成网页，再部署。\n\n\n\n**4. 查看成果**\n\n前往 [http://ryanluoxu.github.io](https://link.zhihu.com/?target=http%3A//ryanluoxu.github.io) 即可。\n\n搭建好之后，继续个性化的设置参考：''''\n\n## 配置 PicGo (CDN 加速)\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6pMTyqIZuaRkfbRXUmLpicpyfjpGRRUVyww2cS88fa5nRkcBb5eA0PQA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n- 仓库名：用户名/仓库名\n- 分支名：所属分支\n- token：\n\n- ![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6ZIhtiblBUicYOf3pJlujt4WKiavibPjnSfWawA2jKWZ5I76FFp83fccN5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n- 指定路径：仓库下的指定文件夹\n- 自定义域名：使用了 CDN 加速，配置格式为：\n\n\n```\nhttps://cdn.jsdelivr.net/gh/用户名/仓库名\n```\n\n\n\n**设置 Typora**\n\n\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6KE2AgAOzPrLYBIic0Gh5Q064ymU8EqzmWJJj8XfibialoaatcmN1QSteg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6pQhFF2BIEQDWNQrFom7jCibf1fBZm4miaWECib807y0EpohrS3YBDRwOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n如果出现以下情况：\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6z8OSeopfdNCF3icI5y5DulNHaibw72wcb3js7lwWFh5KSZarFa9u1qKQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n点击PicGo界面左侧的PicGo设置->设置Server，并按下图设置（默认已设置）\n\n![img](https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6zdIaCw3R0mibSs3GzEvLtFrEVWW9BkFI1cwHticw8b5KDlHvOIPn3aicA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1)\n\n至此，便可通过 Typora 优雅的编写 Markdown 文档，图片粘贴到文档就能够自动上传到 github 图床了。\n\n** **\n\n![image-20201205205536651](https://raw.githubusercontent.com/ly1246621281/PicGo/main/img/image-20201205205536651.png)","slug":"Others/GitPage","published":1,"updated":"2020-12-06T09:44:51.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckid0dae9000ag4l39m8waos2","content":"<h1 id=\"GitPage\"><a href=\"#GitPage\" class=\"headerlink\" title=\"GitPage\"></a>GitPage</h1><p>作者：工匠羅<br>链接：<a href=\"https://www.zhihu.com/question/59088760/answer/265741938\">https://www.zhihu.com/question/59088760/answer/265741938</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<p>搭建这个博客走了许多弯路。在这里分享总结之后的思路和简化步骤。</p>\n<ul>\n<li>Github Pages</li>\n<li>Hexo 博客框架</li>\n<li>部署</li>\n<li>Next 主题</li>\n</ul>\n<h2 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a><strong>Github Pages</strong></h2><p>Github Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。</p>\n<p><strong>操作如下：</strong> </p>\n<p><strong>1. 注册 Github 账号，然后在 Github 中创建一个以 .<a href=\"https://link.zhihu.com/?target=http://github.io\">http://github.io</a> 结尾的 Repository。</strong></p>\n<ol>\n<li><ol>\n<li>Repository name: <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a></li>\n<li>勾选 Initialize this repository with a README</li>\n<li>Create repository</li>\n</ol>\n</li>\n</ol>\n<p><strong>2. 简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存(Commit changes)。</strong></p>\n<p><strong>3. 打开网页：<a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a> 这里就可以看到 README.md 里的内容了。</strong></p>\n<p>如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a> 这个网页显示出来。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a><strong>Hexo</strong></h2><p>Hexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。</p>\n<p>使用 Hexo 之前，需要先安装 Node.js 和 Git。</p>\n<p><strong>操作如下：</strong></p>\n<p><strong>1. 安装 Node.js</strong></p>\n<ul>\n<li>前往 <a href=\"https://link.zhihu.com/?target=https://nodejs.org/en/\">https://nodejs.org/en/</a></li>\n<li>点击 8.9.1 LTS 下载</li>\n<li>安装</li>\n<li>打开 Command Prompt， 输入 <code>node -v</code></li>\n<li>得到：v8.9.1</li>\n</ul>\n<p>安装成功</p>\n<p><strong>2. 安装 Git</strong></p>\n<ul>\n<li>前往 <a href=\"https://link.zhihu.com/?target=https://git-scm.com/\">https://git-scm.com/</a></li>\n<li>点击 Downloads</li>\n<li>点击 Windows</li>\n<li>一般情况，下载会自动开始。如果没有，就点击 click here to download manually</li>\n<li>安装</li>\n<li>打开 Command Prompt， 输入 <code>git --version</code></li>\n<li>得到：git version 2.15.0.windows.1</li>\n</ul>\n<p>安装成功</p>\n<p>额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。</p>\n<p><strong>3. 安装 Hexo</strong></p>\n<ul>\n<li><ul>\n<li>打开 Command Prompt</li>\n<li>输入 <code>npm install -g hexo-cli</code></li>\n<li>回车开始安装</li>\n<li>输入 <code>hexo -v</code></li>\n<li>得到 hexo-cli: 1.0.4 等一串数据</li>\n</ul>\n</li>\n</ul>\n<p>安装成功</p>\n<p><strong>4. 创建本地博客</strong></p>\n<ul>\n<li><ul>\n<li>在D盘下创建文件夹 blog</li>\n<li>鼠标右键 blog，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。</li>\n<li>Git Bash 打开之后，所在的位置就是 blog 这个文件夹的位置。（/d/blog）</li>\n<li>输入 <code>hexo init</code> 将 blog 文件夹初始化成一个博客文件夹。</li>\n<li>输入 <code>npm install</code> 安装依赖包。</li>\n<li>输入 <code>hexo g</code> 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。</li>\n<li>输入 <code>hexo s</code> 将生成的网页放在了本地服务器（server）。</li>\n<li>浏览器里输入 <a href=\"https://link.zhihu.com/?target=http://localhost:4000/\">http://localhost:4000/</a> 。 就可以看到刚才的成果了。</li>\n<li>回到 Git Bash，按 Ctrl+C 结束。</li>\n</ul>\n</li>\n</ul>\n<p>此时再看 <a href=\"https://link.zhihu.com/?target=http://localhost:4000/\">http://localhost:4000/</a> 就是无法访问了。</p>\n<p><strong>5. 发布一篇博客</strong></p>\n<ul>\n<li><ul>\n<li>继续在 Git Bash 里，所在路径还是 /d/blog。输入 <code>hexo new &quot;My First Post&quot;</code></li>\n<li>在 D:\\blog\\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。</li>\n<li>回到 Git Bash，输入 <code>hexo g</code></li>\n<li>输入 <code>hexo s</code></li>\n<li>前往 <a href=\"https://link.zhihu.com/?target=http://localhost:4000/\">http://localhost:4000/</a> 查看成果。</li>\n<li>回到 Git Bash，按 Ctrl+C 结束。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"将本地-Hexo-博客部署在-Github-上\"><a href=\"#将本地-Hexo-博客部署在-Github-上\" class=\"headerlink\" title=\"将本地 Hexo 博客部署在 Github 上\"></a><strong>将本地 Hexo 博客部署在 Github 上</strong></h2><p>前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。</p>\n<p><strong>1. 获取 Github 对应的 Repository 的链接。</strong></p>\n<ul>\n<li>登陆 Github，进入到 <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a></li>\n<li>点击 Clone or download</li>\n<li>复制 URL 待用</li>\n</ul>\n<p>我的是 <code>https://github.com/Ryanluoxu/ryanluoxu.github.io.git</code></p>\n<p><strong>2. 修改博客的配置文件</strong></p>\n<ul>\n<li><ul>\n<li>打开配置文件 /d/blog/_config.yml （使用 bash 里的 vi 或者 notepad++）</li>\n<li>找到 <code>#Deployment</code>，填入以下内容：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:    type: git    repository: https:&#x2F;&#x2F;github.com&#x2F;Ryanluoxu&#x2F;ryanluoxu.github.io.git    branch: master </span><br><span class=\"line\">保存退出</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3. 部署</strong></p>\n<ul>\n<li><ul>\n<li>回到 Git Bash</li>\n<li>输入 <code>npm install hexo-deployer-git --save</code> 安装 hexo-deployer-git 此步骤只需要做一次。</li>\n<li>输入 <code>hexo d</code></li>\n<li>得到 <code>INFO Deploy done: git</code> 即为部署成功</li>\n</ul>\n</li>\n</ul>\n<p>之前我们创建的 ReadMe.md 会被自动覆盖掉。</p>\n<p><strong>4. 查看成果</strong></p>\n<p>前往 <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a> 即可。</p>\n<h2 id=\"使用-Next-主题\"><a href=\"#使用-Next-主题\" class=\"headerlink\" title=\"使用 Next 主题\"></a><strong>使用 Next 主题</strong></h2><p><a href=\"https://link.zhihu.com/?target=https://hexo.io/themes/\">更多 Hexo 的主题看这里</a></p>\n<p>这里以 Next 为例。 大概思路就是把整个主题的文件克隆到我们的主题文件夹中。在配置文件中注明使用该主题。</p>\n<p><strong>操作如下：</strong></p>\n<p><strong>1. 还是回到 Git Bash。 输入</strong> <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p>\n<p>这样，该主题的文件就全部克隆到 D:\\blog\\themes\\next 下面。</p>\n<p><strong>2. 修改博客配置文件</strong></p>\n<ul>\n<li><ul>\n<li>打开 D:\\blog_config.yml</li>\n<li>找到 <code>theme:</code></li>\n<li>把 Hexo 默认的 lanscape 修改成 next。 即 <code>theme: next</code></li>\n<li>找到 <code># Site</code>，添加博客名称，作者名字等。</li>\n<li>在 <code>language</code> 后面填入 en 或者 zh-Hans，选择英文或者中文。</li>\n<li>找到 <code># URL</code>, 填入 url。比如 <code>url: https://ryanluoxu.github.io</code></li>\n</ul>\n</li>\n</ul>\n<p>填入名字后会有很风骚的 © 2017 Ryan Luo Xu 的字样出现在博客底部。</p>\n<p><strong>3. 重新生成部署即可</strong></p>\n<ul>\n<li><ul>\n<li>回到 Git Bash。输入 <code>hexo g -d</code>就可以了。</li>\n</ul>\n</li>\n</ul>\n<p>先把修改的内容生成网页，再部署。</p>\n<p><strong>4. 查看成果</strong></p>\n<p>前往 <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a> 即可。</p>\n<p>搭建好之后，继续个性化的设置参考：’’’’</p>\n<h2 id=\"配置-PicGo-CDN-加速\"><a href=\"#配置-PicGo-CDN-加速\" class=\"headerlink\" title=\"配置 PicGo (CDN 加速)\"></a>配置 PicGo (CDN 加速)</h2><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6pMTyqIZuaRkfbRXUmLpicpyfjpGRRUVyww2cS88fa5nRkcBb5eA0PQA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<ul>\n<li><p>仓库名：用户名/仓库名</p>\n</li>\n<li><p>分支名：所属分支</p>\n</li>\n<li><p>token：</p>\n</li>\n<li><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6ZIhtiblBUicYOf3pJlujt4WKiavibPjnSfWawA2jKWZ5I76FFp83fccN5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n</li>\n</ul>\n<ul>\n<li>指定路径：仓库下的指定文件夹</li>\n<li>自定义域名：使用了 CDN 加速，配置格式为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;用户名&#x2F;仓库名</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>设置 Typora</strong></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6KE2AgAOzPrLYBIic0Gh5Q064ymU8EqzmWJJj8XfibialoaatcmN1QSteg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6pQhFF2BIEQDWNQrFom7jCibf1fBZm4miaWECib807y0EpohrS3YBDRwOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p>如果出现以下情况：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6z8OSeopfdNCF3icI5y5DulNHaibw72wcb3js7lwWFh5KSZarFa9u1qKQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p>点击PicGo界面左侧的PicGo设置-&gt;设置Server，并按下图设置（默认已设置）</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6zdIaCw3R0mibSs3GzEvLtFrEVWW9BkFI1cwHticw8b5KDlHvOIPn3aicA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p>至此，便可通过 Typora 优雅的编写 Markdown 文档，图片粘贴到文档就能够自动上传到 github 图床了。</p>\n<hr>\n<p><img src=\"https://raw.githubusercontent.com/ly1246621281/PicGo/main/img/image-20201205205536651.png\" alt=\"image-20201205205536651\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GitPage\"><a href=\"#GitPage\" class=\"headerlink\" title=\"GitPage\"></a>GitPage</h1><p>作者：工匠羅<br>链接：<a href=\"https://www.zhihu.com/question/59088760/answer/265741938\">https://www.zhihu.com/question/59088760/answer/265741938</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<p>搭建这个博客走了许多弯路。在这里分享总结之后的思路和简化步骤。</p>\n<ul>\n<li>Github Pages</li>\n<li>Hexo 博客框架</li>\n<li>部署</li>\n<li>Next 主题</li>\n</ul>\n<h2 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a><strong>Github Pages</strong></h2><p>Github Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。</p>\n<p><strong>操作如下：</strong> </p>\n<p><strong>1. 注册 Github 账号，然后在 Github 中创建一个以 .<a href=\"https://link.zhihu.com/?target=http://github.io\">http://github.io</a> 结尾的 Repository。</strong></p>\n<ol>\n<li><ol>\n<li>Repository name: <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a></li>\n<li>勾选 Initialize this repository with a README</li>\n<li>Create repository</li>\n</ol>\n</li>\n</ol>\n<p><strong>2. 简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存(Commit changes)。</strong></p>\n<p><strong>3. 打开网页：<a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a> 这里就可以看到 README.md 里的内容了。</strong></p>\n<p>如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a> 这个网页显示出来。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a><strong>Hexo</strong></h2><p>Hexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。</p>\n<p>使用 Hexo 之前，需要先安装 Node.js 和 Git。</p>\n<p><strong>操作如下：</strong></p>\n<p><strong>1. 安装 Node.js</strong></p>\n<ul>\n<li>前往 <a href=\"https://link.zhihu.com/?target=https://nodejs.org/en/\">https://nodejs.org/en/</a></li>\n<li>点击 8.9.1 LTS 下载</li>\n<li>安装</li>\n<li>打开 Command Prompt， 输入 <code>node -v</code></li>\n<li>得到：v8.9.1</li>\n</ul>\n<p>安装成功</p>\n<p><strong>2. 安装 Git</strong></p>\n<ul>\n<li>前往 <a href=\"https://link.zhihu.com/?target=https://git-scm.com/\">https://git-scm.com/</a></li>\n<li>点击 Downloads</li>\n<li>点击 Windows</li>\n<li>一般情况，下载会自动开始。如果没有，就点击 click here to download manually</li>\n<li>安装</li>\n<li>打开 Command Prompt， 输入 <code>git --version</code></li>\n<li>得到：git version 2.15.0.windows.1</li>\n</ul>\n<p>安装成功</p>\n<p>额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。</p>\n<p><strong>3. 安装 Hexo</strong></p>\n<ul>\n<li><ul>\n<li>打开 Command Prompt</li>\n<li>输入 <code>npm install -g hexo-cli</code></li>\n<li>回车开始安装</li>\n<li>输入 <code>hexo -v</code></li>\n<li>得到 hexo-cli: 1.0.4 等一串数据</li>\n</ul>\n</li>\n</ul>\n<p>安装成功</p>\n<p><strong>4. 创建本地博客</strong></p>\n<ul>\n<li><ul>\n<li>在D盘下创建文件夹 blog</li>\n<li>鼠标右键 blog，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。</li>\n<li>Git Bash 打开之后，所在的位置就是 blog 这个文件夹的位置。（/d/blog）</li>\n<li>输入 <code>hexo init</code> 将 blog 文件夹初始化成一个博客文件夹。</li>\n<li>输入 <code>npm install</code> 安装依赖包。</li>\n<li>输入 <code>hexo g</code> 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。</li>\n<li>输入 <code>hexo s</code> 将生成的网页放在了本地服务器（server）。</li>\n<li>浏览器里输入 <a href=\"https://link.zhihu.com/?target=http://localhost:4000/\">http://localhost:4000/</a> 。 就可以看到刚才的成果了。</li>\n<li>回到 Git Bash，按 Ctrl+C 结束。</li>\n</ul>\n</li>\n</ul>\n<p>此时再看 <a href=\"https://link.zhihu.com/?target=http://localhost:4000/\">http://localhost:4000/</a> 就是无法访问了。</p>\n<p><strong>5. 发布一篇博客</strong></p>\n<ul>\n<li><ul>\n<li>继续在 Git Bash 里，所在路径还是 /d/blog。输入 <code>hexo new &quot;My First Post&quot;</code></li>\n<li>在 D:\\blog\\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。</li>\n<li>回到 Git Bash，输入 <code>hexo g</code></li>\n<li>输入 <code>hexo s</code></li>\n<li>前往 <a href=\"https://link.zhihu.com/?target=http://localhost:4000/\">http://localhost:4000/</a> 查看成果。</li>\n<li>回到 Git Bash，按 Ctrl+C 结束。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"将本地-Hexo-博客部署在-Github-上\"><a href=\"#将本地-Hexo-博客部署在-Github-上\" class=\"headerlink\" title=\"将本地 Hexo 博客部署在 Github 上\"></a><strong>将本地 Hexo 博客部署在 Github 上</strong></h2><p>前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。</p>\n<p><strong>1. 获取 Github 对应的 Repository 的链接。</strong></p>\n<ul>\n<li>登陆 Github，进入到 <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a></li>\n<li>点击 Clone or download</li>\n<li>复制 URL 待用</li>\n</ul>\n<p>我的是 <code>https://github.com/Ryanluoxu/ryanluoxu.github.io.git</code></p>\n<p><strong>2. 修改博客的配置文件</strong></p>\n<ul>\n<li><ul>\n<li>打开配置文件 /d/blog/_config.yml （使用 bash 里的 vi 或者 notepad++）</li>\n<li>找到 <code>#Deployment</code>，填入以下内容：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:    type: git    repository: https:&#x2F;&#x2F;github.com&#x2F;Ryanluoxu&#x2F;ryanluoxu.github.io.git    branch: master </span><br><span class=\"line\">保存退出</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3. 部署</strong></p>\n<ul>\n<li><ul>\n<li>回到 Git Bash</li>\n<li>输入 <code>npm install hexo-deployer-git --save</code> 安装 hexo-deployer-git 此步骤只需要做一次。</li>\n<li>输入 <code>hexo d</code></li>\n<li>得到 <code>INFO Deploy done: git</code> 即为部署成功</li>\n</ul>\n</li>\n</ul>\n<p>之前我们创建的 ReadMe.md 会被自动覆盖掉。</p>\n<p><strong>4. 查看成果</strong></p>\n<p>前往 <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a> 即可。</p>\n<h2 id=\"使用-Next-主题\"><a href=\"#使用-Next-主题\" class=\"headerlink\" title=\"使用 Next 主题\"></a><strong>使用 Next 主题</strong></h2><p><a href=\"https://link.zhihu.com/?target=https://hexo.io/themes/\">更多 Hexo 的主题看这里</a></p>\n<p>这里以 Next 为例。 大概思路就是把整个主题的文件克隆到我们的主题文件夹中。在配置文件中注明使用该主题。</p>\n<p><strong>操作如下：</strong></p>\n<p><strong>1. 还是回到 Git Bash。 输入</strong> <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p>\n<p>这样，该主题的文件就全部克隆到 D:\\blog\\themes\\next 下面。</p>\n<p><strong>2. 修改博客配置文件</strong></p>\n<ul>\n<li><ul>\n<li>打开 D:\\blog_config.yml</li>\n<li>找到 <code>theme:</code></li>\n<li>把 Hexo 默认的 lanscape 修改成 next。 即 <code>theme: next</code></li>\n<li>找到 <code># Site</code>，添加博客名称，作者名字等。</li>\n<li>在 <code>language</code> 后面填入 en 或者 zh-Hans，选择英文或者中文。</li>\n<li>找到 <code># URL</code>, 填入 url。比如 <code>url: https://ryanluoxu.github.io</code></li>\n</ul>\n</li>\n</ul>\n<p>填入名字后会有很风骚的 © 2017 Ryan Luo Xu 的字样出现在博客底部。</p>\n<p><strong>3. 重新生成部署即可</strong></p>\n<ul>\n<li><ul>\n<li>回到 Git Bash。输入 <code>hexo g -d</code>就可以了。</li>\n</ul>\n</li>\n</ul>\n<p>先把修改的内容生成网页，再部署。</p>\n<p><strong>4. 查看成果</strong></p>\n<p>前往 <a href=\"https://link.zhihu.com/?target=http://ryanluoxu.github.io\">http://ryanluoxu.github.io</a> 即可。</p>\n<p>搭建好之后，继续个性化的设置参考：’’’’</p>\n<h2 id=\"配置-PicGo-CDN-加速\"><a href=\"#配置-PicGo-CDN-加速\" class=\"headerlink\" title=\"配置 PicGo (CDN 加速)\"></a>配置 PicGo (CDN 加速)</h2><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6pMTyqIZuaRkfbRXUmLpicpyfjpGRRUVyww2cS88fa5nRkcBb5eA0PQA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<ul>\n<li><p>仓库名：用户名/仓库名</p>\n</li>\n<li><p>分支名：所属分支</p>\n</li>\n<li><p>token：</p>\n</li>\n<li><p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6ZIhtiblBUicYOf3pJlujt4WKiavibPjnSfWawA2jKWZ5I76FFp83fccN5g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n</li>\n</ul>\n<ul>\n<li>指定路径：仓库下的指定文件夹</li>\n<li>自定义域名：使用了 CDN 加速，配置格式为：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;用户名&#x2F;仓库名</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>设置 Typora</strong></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6KE2AgAOzPrLYBIic0Gh5Q064ymU8EqzmWJJj8XfibialoaatcmN1QSteg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6pQhFF2BIEQDWNQrFom7jCibf1fBZm4miaWECib807y0EpohrS3YBDRwOg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p>如果出现以下情况：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6z8OSeopfdNCF3icI5y5DulNHaibw72wcb3js7lwWFh5KSZarFa9u1qKQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p>点击PicGo界面左侧的PicGo设置-&gt;设置Server，并按下图设置（默认已设置）</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/R5ic1icyNBNd7t0Yic5aTV1rqBJKicYJ6an6zdIaCw3R0mibSs3GzEvLtFrEVWW9BkFI1cwHticw8b5KDlHvOIPn3aicA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p>至此，便可通过 Typora 优雅的编写 Markdown 文档，图片粘贴到文档就能够自动上传到 github 图床了。</p>\n<hr>\n<p><img src=\"https://raw.githubusercontent.com/ly1246621281/PicGo/main/img/image-20201205205536651.png\" alt=\"image-20201205205536651\"></p>\n"},{"title":"hexo常用命令","date":"2020-12-06T09:21:11.380Z","author":"zk","description":"文章摘要","_content":"## hexo常用命令\n\n[TOC]\n\n我们在前面的已经略微的接触了一些hexo的命令，如 hexo new \"my blog\" ， hexo server 等。下面来介绍一下我们经常会用到的hexo命令\n\n### 1、新建\n\n```cpp\nhexo new \"my blog\"\n```\n\n新建的文件在 hexo/source/_posts/my-blog.md\n\n### 2、生成静态页面\n\n```undefined\nhexo g\n```\n\n一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件\n\n### 3、开启本地服务\n\n```undefined\nhexo s\n```\n\n这个命令，我之前已经用过了，开启本地hexo服务用的\n\n### 4、部署\n\n```undefined\nhexo d\n```\n\n部署到git上的时候，需要用这个命令，下一篇中，我们会使用到这个命令\n\n### 5、清除 public\n\n```undefined\nhexo clean\n```\n\n当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n\n### 6、更新algolia搜索Index\n\n```java\nhexo algolia\n```\n\n当发布新文章时需要在Algolia数据库添加新的Index，这样才能添加到搜索中\n\n[关于安装algolia，参考next官网请](https://link.jianshu.com?t=http://theme-next.iissnan.com/third-party-services.html#algolia-search)\n\n### 7、安装hexo-git\n\n```hexo\nnpm install hexo-deployer-git --save\n\n $ hexo clean  \n //该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题\n $ hexo g -d\n```\n\n作者：Johan007\n链接：https://www.jianshu.com/p/643577a900f8\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/Others/hexo常用命令.md","raw":"---\ntitle:  hexo常用命令\ndate: {{date}}\nauthor: zk\ncategories:\n  - Others\ntags: [hexo,website,前端]\ndescription: 文章摘要 \n\n---\n## hexo常用命令\n\n[TOC]\n\n我们在前面的已经略微的接触了一些hexo的命令，如 hexo new \"my blog\" ， hexo server 等。下面来介绍一下我们经常会用到的hexo命令\n\n### 1、新建\n\n```cpp\nhexo new \"my blog\"\n```\n\n新建的文件在 hexo/source/_posts/my-blog.md\n\n### 2、生成静态页面\n\n```undefined\nhexo g\n```\n\n一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件\n\n### 3、开启本地服务\n\n```undefined\nhexo s\n```\n\n这个命令，我之前已经用过了，开启本地hexo服务用的\n\n### 4、部署\n\n```undefined\nhexo d\n```\n\n部署到git上的时候，需要用这个命令，下一篇中，我们会使用到这个命令\n\n### 5、清除 public\n\n```undefined\nhexo clean\n```\n\n当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n\n### 6、更新algolia搜索Index\n\n```java\nhexo algolia\n```\n\n当发布新文章时需要在Algolia数据库添加新的Index，这样才能添加到搜索中\n\n[关于安装algolia，参考next官网请](https://link.jianshu.com?t=http://theme-next.iissnan.com/third-party-services.html#algolia-search)\n\n### 7、安装hexo-git\n\n```hexo\nnpm install hexo-deployer-git --save\n\n $ hexo clean  \n //该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题\n $ hexo g -d\n```\n\n作者：Johan007\n链接：https://www.jianshu.com/p/643577a900f8\n来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"Others/hexo常用命令","published":1,"updated":"2020-12-06T09:33:33.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckid0daea000cg4l30iwg2dmn","content":"<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><p>[TOC]</p>\n<p>我们在前面的已经略微的接触了一些hexo的命令，如 hexo new “my blog” ， hexo server 等。下面来介绍一下我们经常会用到的hexo命令</p>\n<h3 id=\"1、新建\"><a href=\"#1、新建\" class=\"headerlink\" title=\"1、新建\"></a>1、新建</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">&quot;my blog&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>新建的文件在 hexo/source/_posts/my-blog.md</p>\n<h3 id=\"2、生成静态页面\"><a href=\"#2、生成静态页面\" class=\"headerlink\" title=\"2、生成静态页面\"></a>2、生成静态页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p>一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</p>\n<h3 id=\"3、开启本地服务\"><a href=\"#3、开启本地服务\" class=\"headerlink\" title=\"3、开启本地服务\"></a>3、开启本地服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>这个命令，我之前已经用过了，开启本地hexo服务用的</p>\n<h3 id=\"4、部署\"><a href=\"#4、部署\" class=\"headerlink\" title=\"4、部署\"></a>4、部署</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>部署到git上的时候，需要用这个命令，下一篇中，我们会使用到这个命令</p>\n<h3 id=\"5、清除-public\"><a href=\"#5、清除-public\" class=\"headerlink\" title=\"5、清除 public\"></a>5、清除 public</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</p>\n<h3 id=\"6、更新algolia搜索Index\"><a href=\"#6、更新algolia搜索Index\" class=\"headerlink\" title=\"6、更新algolia搜索Index\"></a>6、更新algolia搜索Index</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo algolia</span><br></pre></td></tr></table></figure>\n\n<p>当发布新文章时需要在Algolia数据库添加新的Index，这样才能添加到搜索中</p>\n<p><a href=\"https://link.jianshu.com/?t=http://theme-next.iissnan.com/third-party-services.html#algolia-search\">关于安装algolia，参考next官网请</a></p>\n<h3 id=\"7、安装hexo-git\"><a href=\"#7、安装hexo-git\" class=\"headerlink\" title=\"7、安装hexo-git\"></a>7、安装hexo-git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\"> $ hexo clean  </span><br><span class=\"line\"> &#x2F;&#x2F;该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题</span><br><span class=\"line\"> $ hexo g -d</span><br></pre></td></tr></table></figure>\n\n<p>作者：Johan007<br>链接：<a href=\"https://www.jianshu.com/p/643577a900f8\">https://www.jianshu.com/p/643577a900f8</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><p>[TOC]</p>\n<p>我们在前面的已经略微的接触了一些hexo的命令，如 hexo new “my blog” ， hexo server 等。下面来介绍一下我们经常会用到的hexo命令</p>\n<h3 id=\"1、新建\"><a href=\"#1、新建\" class=\"headerlink\" title=\"1、新建\"></a>1、新建</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">&quot;my blog&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>新建的文件在 hexo/source/_posts/my-blog.md</p>\n<h3 id=\"2、生成静态页面\"><a href=\"#2、生成静态页面\" class=\"headerlink\" title=\"2、生成静态页面\"></a>2、生成静态页面</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n\n<p>一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</p>\n<h3 id=\"3、开启本地服务\"><a href=\"#3、开启本地服务\" class=\"headerlink\" title=\"3、开启本地服务\"></a>3、开启本地服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<p>这个命令，我之前已经用过了，开启本地hexo服务用的</p>\n<h3 id=\"4、部署\"><a href=\"#4、部署\" class=\"headerlink\" title=\"4、部署\"></a>4、部署</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p>部署到git上的时候，需要用这个命令，下一篇中，我们会使用到这个命令</p>\n<h3 id=\"5、清除-public\"><a href=\"#5、清除-public\" class=\"headerlink\" title=\"5、清除 public\"></a>5、清除 public</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</p>\n<h3 id=\"6、更新algolia搜索Index\"><a href=\"#6、更新algolia搜索Index\" class=\"headerlink\" title=\"6、更新algolia搜索Index\"></a>6、更新algolia搜索Index</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo algolia</span><br></pre></td></tr></table></figure>\n\n<p>当发布新文章时需要在Algolia数据库添加新的Index，这样才能添加到搜索中</p>\n<p><a href=\"https://link.jianshu.com/?t=http://theme-next.iissnan.com/third-party-services.html#algolia-search\">关于安装algolia，参考next官网请</a></p>\n<h3 id=\"7、安装hexo-git\"><a href=\"#7、安装hexo-git\" class=\"headerlink\" title=\"7、安装hexo-git\"></a>7、安装hexo-git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\"> $ hexo clean  </span><br><span class=\"line\"> &#x2F;&#x2F;该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题</span><br><span class=\"line\"> $ hexo g -d</span><br></pre></td></tr></table></figure>\n\n<p>作者：Johan007<br>链接：<a href=\"https://www.jianshu.com/p/643577a900f8\">https://www.jianshu.com/p/643577a900f8</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckid0dae50005g4l3amyuckeb","category_id":"ckid0dae60007g4l34k8c4xz4","_id":"ckid0daee000fg4l388zn7glj"},{"post_id":"ckid0dae50006g4l390552ljz","category_id":"ckid0dae60007g4l34k8c4xz4","_id":"ckid0daef000ig4l32s0cbmoc"},{"post_id":"ckid0dae70008g4l3fp99fvd1","category_id":"ckid0dae60007g4l34k8c4xz4","_id":"ckid0daef000jg4l3cfrefmw2"},{"post_id":"ckid0dae80009g4l3gj9h990q","category_id":"ckid0daef000hg4l37lpd06oj","_id":"ckid0daeg000mg4l32d54czyi"},{"post_id":"ckid0dae9000ag4l39m8waos2","category_id":"ckid0daeg000lg4l3fr2e89es","_id":"ckid0daei000sg4l314nz4crg"},{"post_id":"ckid0daea000cg4l30iwg2dmn","category_id":"ckid0daeg000lg4l3fr2e89es","_id":"ckid0daei000vg4l3fgjx0vuh"}],"PostTag":[{"post_id":"ckid0dae9000ag4l39m8waos2","tag_id":"ckid0daed000dg4l378oo440k","_id":"ckid0daeh000pg4l3hlpvg8gz"},{"post_id":"ckid0dae9000ag4l39m8waos2","tag_id":"ckid0daee000gg4l37w4ycd37","_id":"ckid0daei000qg4l3dlnpfwez"},{"post_id":"ckid0dae9000ag4l39m8waos2","tag_id":"ckid0daef000kg4l32672dscn","_id":"ckid0daei000tg4l3778p0yme"},{"post_id":"ckid0daea000cg4l30iwg2dmn","tag_id":"ckid0daed000dg4l378oo440k","_id":"ckid0daej000wg4l36ftbgo0f"},{"post_id":"ckid0daea000cg4l30iwg2dmn","tag_id":"ckid0daee000gg4l37w4ycd37","_id":"ckid0daej000xg4l36j3x690u"},{"post_id":"ckid0daea000cg4l30iwg2dmn","tag_id":"ckid0daef000kg4l32672dscn","_id":"ckid0daej000yg4l3b7ma1fa7"}],"Tag":[{"name":"hexo","_id":"ckid0daed000dg4l378oo440k"},{"name":"website","_id":"ckid0daee000gg4l37w4ycd37"},{"name":"前端","_id":"ckid0daef000kg4l32672dscn"}]}}